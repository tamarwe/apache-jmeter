<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Performance Benchmark" enabled="true">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <stringProp name="TestPlan.comments">Lombardi Application Services standard Production performance benchmark</stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Global Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ServerIP" elementType="Argument">
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">oms.corrections.state.la.us</stringProp>
            <stringProp name="Argument.name">ServerIP</stringProp>
            <stringProp name="Argument.desc">Runtime server </stringProp>
          </elementProp>
          <elementProp name="ServerPort" elementType="Argument">
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.name">ServerPort</stringProp>
          </elementProp>
          <elementProp name="ThinkTime" elementType="Argument">
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">3000</stringProp>
            <stringProp name="Argument.name">ThinkTime</stringProp>
          </elementProp>
          <elementProp name="ChromeDriver" elementType="Argument">
            <stringProp name="Argument.name">ChromeDriver</stringProp>
            <stringProp name="Argument.value">C:\IBM\BPMLoadTesting\apache-jmeter-2.13\bin\chromedriver.exe</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LoopNumber" elementType="Argument">
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.name">LoopNumber</stringProp>
            <stringProp name="Argument.desc">Number of cycles</stringProp>
          </elementProp>
          <elementProp name="UsersAmount" elementType="Argument">
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.name">UsersAmount</stringProp>
            <stringProp name="Argument.desc">Number of virtual users </stringProp>
          </elementProp>
          <elementProp name="RampUp" elementType="Argument">
            <stringProp name="Argument.name">RampUp</stringProp>
            <stringProp name="Argument.value">200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Ramp up time.  </stringProp>
          </elementProp>
          <elementProp name="BPMProcesssAppId" elementType="Argument">
            <stringProp name="Argument.name">BPMProcesssAppId</stringProp>
            <stringProp name="Argument.value">2066.14138859-3e22-4bcd-8faf-cddc502636bd</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ServiceId" elementType="Argument">
            <stringProp name="Argument.name">ServiceId</stringProp>
            <stringProp name="Argument.value">1.4c99087d-0df8-4a74-9e44-14079cd2bd54</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ServiceName" elementType="Argument">
            <stringProp name="Argument.name">ServiceName</stringProp>
            <stringProp name="Argument.value">Search Offenders</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ServiceViewOffenderDocklets" elementType="Argument">
            <stringProp name="Argument.name">ServiceViewOffenderDocklets</stringProp>
            <stringProp name="Argument.value">View Offender Dockets</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ServiceViewOffenderDockletsId" elementType="Argument">
            <stringProp name="Argument.name">ServiceViewOffenderDockletsId</stringProp>
            <stringProp name="Argument.value">1.42b75850-fdef-4d4a-8bdd-199e740770d4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="StandardBench" enabled="true">
        <longProp name="ThreadGroup.start_time">1185612091000</longProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.num_threads">${UsersAmount}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <longProp name="ThreadGroup.end_time">1185612091000</longProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RampUp}</stringProp>
        <stringProp name="TestPlan.comments">The standard baseline bencmark for production environments</stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="Chrome Driver Config" enabled="false">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">${ChromeDriver}</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Users CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">users.txt</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">UserName,UserPassword</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Doc Numbers CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">docnumbers.txt</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">DOCNumber</stringProp>
        </CSVDataSet>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="1252202759">jsessionid</stringProp>
            <stringProp name="1216985755">password</stringProp>
            <stringProp name="1232042220">VIEWSTATE</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-37348392">
              <stringProp name="0"></stringProp>
              <stringProp name="-1782062560">${UserPassword}</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://${ServerIP}:${ServerPort}/rest</stringProp>
              <stringProp name="Authorization.username">${UserName}</stringProp>
              <stringProp name="Authorization.password">${UserPassword}</stringProp>
              <stringProp name="Authorization.domain">/</stringProp>
              <stringProp name="Authorization.realm">WLERESTAPI</stringProp>
            </elementProp>
          </collectionProp>
        </AuthManager>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Chrome Loop Controller" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${LoopNumber}</stringProp>
        </LoopController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Executing of first Service" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Exposed Service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/exposed/service</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Get Exposed Service</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="JSON Parse for benchURL" enabled="true">
                <stringProp name="TestPlan.comments">Get the URL that will start a new process</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());

//log.info(&quot;SearchResponse.data &quot; + SearchResponse.data);

vars.put(&quot;benchURL&quot; ,&quot;BAD&quot;);
var name = vars.get(&quot;ServiceName&quot;);

//log.info(&quot;Searching for service: &quot; + name)
for (var counter =0; counter &lt; SearchResponse.data.exposedItemsList.length; counter++)	
{		
    var x = SearchResponse.data.exposedItemsList[counter];
    //log.info(&quot;Service: &quot; + x.runURL)
    if (x.display ==name) {
        vars.put(&quot;benchURL&quot; , x.runURL);
        log.info(&quot;Found Exposed Service: &quot; + x.runURL);
        break;
    }
}</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is Benchmark URL OK?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="65509">BAD</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">6</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">benchURL</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think Time" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Portal Login" enabled="true">
              <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)

WDS.log.info(&quot;benchURL: ${benchURL}&quot;)
WDS.log.info(&quot;UserName: ${UserName}&quot;)
WDS.log.info(&quot;UserPassword: ${UserPassword}&quot;)

WDS.log.info(&quot;Before delete Cookies: &quot; +WDS.browser.manage().getCookies())
WDS.browser.manage().deleteAllCookies();
WDS.log.info(&quot;Deleted Cookies: &quot; +WDS.browser.manage().getCookies())

//WDS.sampleResult.sampleStart()
WDS.browser.get(&quot;${benchURL}&quot;)

try
{
    var inputField = WDS.browser.findElement(pkg.By.id(&apos;username&apos;))
    inputField.sendKeys([&apos;${UserName}&apos;])

    var passwordField = WDS.browser.findElement(pkg.By.id(&apos;password&apos;))
    passwordField.sendKeys([&apos;${UserPassword}&apos;])

    var submit = WDS.browser.findElement(pkg.By.id(&apos;log_in&apos;))
    submit.click()
}
catch(e)
{
    WDS.log.info(&quot;Portal Login is already complete.&quot;)
}

//WDS.sampleResult.sampleEnd()
</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Search for Offenders" enabled="true"/>
            <hashTree>
              <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Search Offenders" enabled="true">
                <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait = new pkg.WebDriverWait(WDS.browser,5000)

WDS.log.info(&quot;docNumber: &quot; + ${DOCNumber})
WDS.sampleResult.sampleStart()

var docNumber = WDS.browser.findElement(pkg.By.xpath(&apos;//div[@data-binding=&quot;local.offenderSearch.docNumber&quot;]/.//input[@class=&quot;dijitReset dijitInputInner&quot;]&apos;))
WDS.log.info(&quot;docNumber: &quot; +  docNumber)
docNumber.sendKeys([&apos;${DOCNumber}&apos;])

//&lt;button class=&quot;BPMButton BPMButtonBorder&quot; type=&quot;button&quot;&gt;Search&lt;/button&gt;
var searchButton = WDS.browser.findElement(pkg.By.xpath(&apos;//button[text()=&quot;Search&quot;]&apos;))
WDS.log.info(&quot;searchButton: &quot; +  searchButton)
searchButton.click()

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;/html/.//div[@aria-checked=&quot;false&quot;]&apos;)))

var searchResultsButton = WDS.browser.findElement(pkg.By.xpath(&apos;/html/.//div[@aria-checked=&quot;false&quot;]&apos;))
WDS.log.info(&quot;searchResultsButton: &quot; +  searchResultsButton)
searchResultsButton.click()

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[@type=&quot;button&quot; and text()=&quot;Documents&quot;]&apos;)))

WDS.sampleResult.sampleEnd()</stringProp>
                <stringProp name="WebDriverSampler.parameters"></stringProp>
                <stringProp name="WebDriverSampler.language">javascript</stringProp>
              </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think Time" enabled="true">
                <stringProp name="ConstantTimer.delay">100</stringProp>
                <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load Offender Record" enabled="true">
                <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait = new pkg.WebDriverWait(WDS.browser,5000)

WDS.sampleResult.sampleStart()

var continueButton = WDS.browser.findElement(pkg.By.xpath(&apos;//button[@type=&quot;button&quot; and text()=&quot;Continue&quot;]&apos;))
WDS.log.info(&quot;continueButton: &quot; +  continueButton)
continueButton.click()

wait.until(pkg.ExpectedConditions.titleContains(&quot;Offender Profile&quot;))
WDS.sampleResult.sampleEnd()</stringProp>
                <stringProp name="WebDriverSampler.parameters"></stringProp>
                <stringProp name="WebDriverSampler.language">javascript</stringProp>
              </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think Time" enabled="true">
                <stringProp name="ConstantTimer.delay">100</stringProp>
                <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Complete Offenders Record" enabled="true">
                <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait = new pkg.WebDriverWait(WDS.browser,5000)

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[@type=&quot;button&quot; and text()=&quot;Complete&quot;]&apos;)))

WDS.sampleResult.sampleStart()

var completeButton = WDS.browser.findElement(pkg.By.xpath(&apos;//button[@type=&quot;button&quot; and text()=&quot;Complete&quot;]&apos;))
WDS.log.info(&quot;completeButton: &quot; +  completeButton)
completeButton.click()

wait.until(pkg.ExpectedConditions.titleContains(&quot;Select Person by Alias&quot;))
WDS.sampleResult.sampleEnd()</stringProp>
                <stringProp name="WebDriverSampler.parameters"></stringProp>
                <stringProp name="WebDriverSampler.language">javascript</stringProp>
              </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think Time" enabled="true">
                <stringProp name="ConstantTimer.delay">100</stringProp>
                <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Complete Service" enabled="true">
                <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait = new pkg.WebDriverWait(WDS.browser,5000)

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[@type=&quot;button&quot; and text()=&quot;Complete&quot;]&apos;)))

WDS.sampleResult.sampleStart()

var completeButton = WDS.browser.findElement(pkg.By.xpath(&apos;//button[@type=&quot;button&quot; and text()=&quot;Complete&quot;]&apos;))
WDS.log.info(&quot;completeButton: &quot; +  completeButton)
completeButton.click()

wait.until(pkg.ExpectedConditions.titleContains(&quot;The activity has finished&quot;))
WDS.sampleResult.sampleEnd()</stringProp>
                <stringProp name="WebDriverSampler.parameters"></stringProp>
                <stringProp name="WebDriverSampler.language">javascript</stringProp>
              </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think Time" enabled="true">
                <stringProp name="ConstantTimer.delay">100</stringProp>
                <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Executing of second Service" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Exposed Service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/exposed/service</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Get Exposed Service</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="JSON Parse for benchURL" enabled="true">
                <stringProp name="TestPlan.comments">Get the URL that will start a new process</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());

//log.info(&quot;SearchResponse.data &quot; + SearchResponse.data);

vars.put(&quot;benchURL&quot; ,&quot;BAD&quot;);
var name = vars.get(&quot;ServiceViewOffenderDocklets&quot;);

//log.info(&quot;Searching for service: &quot; + name)
for (var counter =0; counter &lt; SearchResponse.data.exposedItemsList.length; counter++)	
{		
    var x = SearchResponse.data.exposedItemsList[counter];
    //log.info(&quot;Service: &quot; + x.runURL)
    if (x.display ==name) {
        vars.put(&quot;benchURL&quot; , x.runURL);
        log.info(&quot;Found Exposed Service: &quot; + x.runURL);
        break;
    }
}</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is Benchmark URL OK?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="65509">BAD</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">6</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">benchURL</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Portal Login" enabled="true">
              <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)

WDS.log.info(&quot;benchURL: ${benchURL}&quot;)
WDS.log.info(&quot;UserName: ${UserName}&quot;)
WDS.log.info(&quot;UserPassword: ${UserPassword}&quot;)

//WDS.sampleResult.sampleStart()
WDS.browser.get(&quot;${benchURL}&quot;)

try
{
    var inputField = WDS.browser.findElement(pkg.By.id(&apos;username&apos;))
    inputField.sendKeys([&apos;${UserName}&apos;])

    var passwordField = WDS.browser.findElement(pkg.By.id(&apos;password&apos;))
    passwordField.sendKeys([&apos;${UserPassword}&apos;])

    var submit = WDS.browser.findElement(pkg.By.id(&apos;log_in&apos;))
    submit.click()
}
catch(e)
{
    WDS.log.info(&quot;Portal Login is already complete.&quot;)
}

//WDS.sampleResult.sampleEnd()
</stringProp>
              <stringProp name="WebDriverSampler.parameters"></stringProp>
              <stringProp name="WebDriverSampler.language">javascript</stringProp>
            </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View Offender Doclet" enabled="true"/>
            <hashTree>
              <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Enter Doc Number" enabled="true">
                <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait = new pkg.WebDriverWait(WDS.browser,5000)

WDS.log.info(&quot;docNumber: &quot; +  ${DOCNumber})
WDS.sampleResult.sampleStart()

var docNumber = WDS.browser.findElement(pkg.By.xpath(&apos;//div[div/label/text()=&quot;DOC Number&quot;]/.//input[not(@readonly=&quot;readonly&quot;)]&apos;))
WDS.log.info(&quot;docNumber: &quot; +  docNumber)
docNumber.sendKeys([&apos;${DOCNumber}&apos;])

WDS.sampleResult.sampleEnd()


</stringProp>
                <stringProp name="WebDriverSampler.parameters"></stringProp>
                <stringProp name="WebDriverSampler.language">javascript</stringProp>
              </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think Time" enabled="true">
                <stringProp name="ConstantTimer.delay">100</stringProp>
                <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load Doc Number Record" enabled="true">
                <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait = new pkg.WebDriverWait(WDS.browser,5000)

WDS.sampleResult.sampleStart()

var continueButton = WDS.browser.findElement(pkg.By.xpath(&apos;//button[@type=&quot;button&quot; and text()=&quot;Continue&quot;]&apos;))
WDS.log.info(&quot;continueButton: &quot; +  continueButton)
continueButton.click()

WDS.sampleResult.sampleEnd()

</stringProp>
                <stringProp name="WebDriverSampler.parameters"></stringProp>
                <stringProp name="WebDriverSampler.language">javascript</stringProp>
              </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think Time" enabled="true">
                <stringProp name="ConstantTimer.delay">100</stringProp>
                <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Select Offenders Details" enabled="true">
                <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait = new pkg.WebDriverWait(WDS.browser,5000)

WDS.sampleResult.sampleStart()

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[@type=&quot;button&quot; and text()=&quot;Details&quot;]&apos;)))
var detailsButton = WDS.browser.findElement(pkg.By.xpath(&apos;//button[@type=&quot;button&quot; and text()=&quot;Details&quot;]&apos;))
WDS.log.info(&quot;detailsButton: &quot; +  detailsButton)
detailsButton.click()

WDS.sampleResult.sampleEnd()


</stringProp>
                <stringProp name="WebDriverSampler.parameters"></stringProp>
                <stringProp name="WebDriverSampler.language">javascript</stringProp>
              </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think Time" enabled="true">
                <stringProp name="ConstantTimer.delay">100</stringProp>
                <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Select Offenders Click Ok" enabled="true">
                <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait = new pkg.WebDriverWait(WDS.browser,5000)

WDS.sampleResult.sampleStart()

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[@type=&quot;button&quot; and text()=&quot;OK&quot;]&apos;)))
var okButton = WDS.browser.findElement(pkg.By.xpath(&apos;//button[@type=&quot;button&quot; and text()=&quot;OK&quot;]&apos;))
WDS.log.info(&quot;okButton: &quot; +  okButton)
okButton.click()

WDS.sampleResult.sampleEnd()


</stringProp>
                <stringProp name="WebDriverSampler.parameters"></stringProp>
                <stringProp name="WebDriverSampler.language">javascript</stringProp>
              </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think Time" enabled="true">
                <stringProp name="ConstantTimer.delay">100</stringProp>
                <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Select Offenders Click Final Ok" enabled="true">
                <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)
var wait = new pkg.WebDriverWait(WDS.browser,5000)

WDS.sampleResult.sampleStart()

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[@type=&quot;button&quot; and text()=&quot;OK&quot;]&apos;)))
var okButton = WDS.browser.findElement(pkg.By.xpath(&apos;//button[@type=&quot;button&quot; and text()=&quot;OK&quot;]&apos;))
WDS.log.info(&quot;okButton: &quot; +  okButton)
okButton.click()

WDS.sampleResult.sampleEnd()</stringProp>
                <stringProp name="WebDriverSampler.parameters"></stringProp>
                <stringProp name="WebDriverSampler.language">javascript</stringProp>
              </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think Time" enabled="true">
                <stringProp name="ConstantTimer.delay">100</stringProp>
                <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Login to Portal" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Login" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/user/current?parts=all</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">https://localhost:9443/rest/bpm/wle/v1/user/current?parts=all</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <intProp name="Assertion.test_type">8</intProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <intProp name="Assertion.test_type">2</intProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">150</stringProp>
            <stringProp name="RandomTimer.range">400.0</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${LoopNumber}</stringProp>
        </LoopController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Executing of first Service" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Exposed Service" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/exposed/service</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Get Exposed Service</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="JSON Parse for benchURL" enabled="true">
                <stringProp name="TestPlan.comments">Get the URL that will start a new process</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());

//log.info(&quot;SearchResponse.data &quot; + SearchResponse.data);

vars.put(&quot;benchURL&quot; ,&quot;BAD&quot;);
var name = vars.get(&quot;ServiceName&quot;);

//log.info(&quot;Searching for service: &quot; + name)
for (var counter =0; counter &lt; SearchResponse.data.exposedItemsList.length; counter++)	
{		
    var x = SearchResponse.data.exposedItemsList[counter];
    //log.info(&quot;Service: &quot; + x.runURL)
    if (x.display ==name) {
        vars.put(&quot;benchURL&quot; , x.runURL);
        log.info(&quot;Found Exposed Service: &quot; + x.runURL);
        break;
    }
}</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is Benchmark URL OK?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="65509">BAD</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">6</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">benchURL</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think Time" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search for Offenders" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="action" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">start</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">action</stringProp>
                  </elementProp>
                  <elementProp name="createTask" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">createTask</stringProp>
                  </elementProp>
                  <elementProp name="parts" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">all</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">parts</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/service/${ServiceId}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Search for Offenders</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think Time" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Exposed Service" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/exposed/service</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Get Exposed Service</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="JSON Parse for benchURL" enabled="true">
                <stringProp name="TestPlan.comments">Get the URL that will start a new process</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());

//log.info(&quot;SearchResponse.data &quot; + SearchResponse.data);

vars.put(&quot;benchURL&quot; ,&quot;BAD&quot;);
var name = vars.get(&quot;ServiceViewOffenderDocklets&quot;);

//log.info(&quot;Searching for service: &quot; + name)
for (var counter =0; counter &lt; SearchResponse.data.exposedItemsList.length; counter++)	
{		
    var x = SearchResponse.data.exposedItemsList[counter];
    //log.info(&quot;Service: &quot; + x.runURL)
    if (x.display ==name) {
        vars.put(&quot;benchURL&quot; , x.runURL);
        log.info(&quot;Found Exposed Service: &quot; + x.runURL);
        break;
    }
}</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is Benchmark URL OK?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="65509">BAD</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">6</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">benchURL</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Offender Doclet" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="action" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">start</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">action</stringProp>
                  </elementProp>
                  <elementProp name="createTask" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">createTask</stringProp>
                  </elementProp>
                  <elementProp name="parts" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">all</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">parts</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/service/${ServiceViewOffenderDockletsId}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">View Offender Doclet</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Think Time" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Log Out" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Log Out" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mum/logout</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">https://localhost:9443/mum/logout</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <intProp name="Assertion.test_type">8</intProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="595420984">&lt;title&gt;Process Portal&lt;/title&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <intProp name="Assertion.test_type">2</intProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree Error" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree Success" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="ResultCollector.success_only_logging">true</boolProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Active Threads Over Time " enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">10000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Hits per Second" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">5000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Response Times Over Time" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">5000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesPercentilesGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Response Times Percentiles" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">500</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Transactions per Second" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename">C:\IBM\BPMLoadTesting\apache-jmeter-2.13\TestPlanScripts\OMS_Search_Offenders.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
