<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="BPM Process Application Test Plan" enabled="true">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <stringProp name="TestPlan.comments">BPM Process Application Test Plan</stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Global Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="SERVER_HOST" elementType="Argument">
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">ibm-vm</stringProp>
            <stringProp name="Argument.name">SERVER_HOST</stringProp>
            <stringProp name="Argument.desc">BPM Server </stringProp>
          </elementProp>
          <elementProp name="SERVER_PORT" elementType="Argument">
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">21319</stringProp>
            <stringProp name="Argument.name">SERVER_PORT</stringProp>
            <stringProp name="Argument.desc">BPM Server Port</stringProp>
          </elementProp>
          <elementProp name="THINK_TIME" elementType="Argument">
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.name">THINK_TIME</stringProp>
          </elementProp>
          <elementProp name="RAMP_UP" elementType="Argument">
            <stringProp name="Argument.name">RAMP_UP</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MAX_USERS" elementType="Argument">
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.name">MAX_USERS</stringProp>
            <stringProp name="Argument.desc">Number of virtual users</stringProp>
          </elementProp>
          <elementProp name="USER_NAME" elementType="Argument">
            <stringProp name="Argument.name">USER_NAME</stringProp>
            <stringProp name="Argument.value">deadmin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">USER_PASSWORD</stringProp>
            <stringProp name="Argument.value">tw_admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOP_COUNTER" elementType="Argument">
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.name">LOOP_COUNTER</stringProp>
            <stringProp name="Argument.desc">Number of cycles</stringProp>
          </elementProp>
          <elementProp name="UserStartNumber" elementType="Argument">
            <stringProp name="Argument.name">UserStartNumber</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserEndNumber" elementType="Argument">
            <stringProp name="Argument.name">UserEndNumber</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserName" elementType="Argument">
            <stringProp name="Argument.name">UserName</stringProp>
            <stringProp name="Argument.value">lswbenchmark</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PROCESS_NAME" elementType="Argument">
            <stringProp name="Argument.name">PROCESS_NAME</stringProp>
            <stringProp name="Argument.value">Standard HR Open New Position</stringProp>
            <stringProp name="Argument.desc">Process Name</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BPM_REST_PROCESS" elementType="Argument">
            <stringProp name="Argument.name">BPM_REST_PROCESS</stringProp>
            <stringProp name="Argument.value">/rest/bpm/wle/v1/process</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Application Thread" enabled="true">
        <longProp name="ThreadGroup.start_time">1185612091000</longProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.num_threads">${MAX_USERS}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <longProp name="ThreadGroup.end_time">1185612091000</longProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMP_UP}</stringProp>
        <stringProp name="TestPlan.comments">Application Thread</stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="1252202759">jsessionid</stringProp>
            <stringProp name="1216985755">password</stringProp>
            <stringProp name="1232042220">VIEWSTATE</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1435384063">
              <stringProp name="0"></stringProp>
              <stringProp name="305645157">${USER_PASSWORD}</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://${SERVER_HOST}:${SERVER_PORT}/rest</stringProp>
              <stringProp name="Authorization.username">${USER_NAME}</stringProp>
              <stringProp name="Authorization.password">${USER_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain">/</stringProp>
              <stringProp name="Authorization.realm">WLERESTAPI</stringProp>
            </elementProp>
          </collectionProp>
        </AuthManager>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Changing Vuser Number" enabled="false">
          <stringProp name="CounterConfig.start">${UserStartNumber}</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">userNumber</stringProp>
          <stringProp name="CounterConfig.format">0</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
          <stringProp name="CounterConfig.end">${UserEndNumber}</stringProp>
        </CounterConfig>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager vUser" enabled="false">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://${SERVER_HOST}:${SERVER_PORT}/rest</stringProp>
              <stringProp name="Authorization.username">${UserName}${userNumber}</stringProp>
              <stringProp name="Authorization.password">password</stringProp>
              <stringProp name="Authorization.domain">/</stringProp>
              <stringProp name="Authorization.realm">WLERESTAPI</stringProp>
            </elementProp>
          </collectionProp>
        </AuthManager>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Login to Portal" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get User" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/user/current?parts=all</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">https://${SERVER_HOST}:${SERVER_PORT}/rest/bpm/wle/v1/user/current?parts=all</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <intProp name="Assertion.test_type">8</intProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <intProp name="Assertion.test_type">2</intProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">150</stringProp>
            <stringProp name="RandomTimer.range">400.0</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${LOOP_COUNTER}</stringProp>
        </LoopController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Start Business Process" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Exposed Process" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/exposed</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">https://${SERVER_HOST}:${SERVER_PORT}/rest/bpm/wle/v1/exposed</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="JSON Parse for Process" enabled="true">
                <stringProp name="TestPlan.comments">Get the URL that will start a new process</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;================================= Get Exposed Process =================================&quot;);

// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());
//log.info(&quot;SearchResponse.data &quot; + SearchResponse.data);

vars.put(&quot;processURL&quot; ,&quot;BAD&quot;);
var name = vars.get(&quot;PROCESS_NAME&quot;);

for (var counter =0; counter &lt; SearchResponse.data.exposedItemsList.length; counter++)	
{		
    var x = SearchResponse.data.exposedItemsList[counter];
    var display = x.display;
    var processAppName = x.processAppName;
    var type = x.type;
    var startURL = x.startURL;
    var runURL = x.runURL;
    
    log.info(&quot;Process: &quot; + type)

//    if (x.type == &quot;service&quot;)
//    {
//        log.info(&quot;processAppName: &quot; + processAppName)
//        log.info(&quot;display: &quot; + display)    
//        log.info(&quot;title: &quot; + x.title)                    
//        log.info(&quot;runURL: &quot; + runURL)        
//    }

    if (type == &quot;process&quot;)
    {
        log.info(&quot;processAppName: &quot; + processAppName)
        log.info(&quot;type: &quot; + type)
        log.info(&quot;display: &quot; + display)                      
        log.info(&quot;startURL: &quot; + startURL)        
    }    
    
    if (display == name) {
    	   log.info(&quot;Found Exposed Process: &quot; + startURL);
        vars.put(&quot;exposedURL&quot; , startURL);
        break;
    }
}
log.info(&quot;=======================================================================================&quot;);</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is Benchmark URL OK?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="65509">BAD</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">6</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">benchURL</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Exposed Services" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/exposed</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">https://${SERVER_HOST}:${SERVER_PORT}/rest/bpm/wle/v1/exposed</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="JSON Parse for benchURL" enabled="true">
                <stringProp name="TestPlan.comments">Get the URL that will start a new process</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;================================= Get Exposed Services =================================&quot;);

// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());
//log.info(&quot;SearchResponse.data &quot; + SearchResponse.data);

vars.put(&quot;processURL&quot; ,&quot;BAD&quot;);
var name = vars.get(&quot;PROCESS_NAME&quot;);

for (var counter =0; counter &lt; SearchResponse.data.exposedItemsList.length; counter++)	
{		
    var x = SearchResponse.data.exposedItemsList[counter];
    var display = x.display;
    var processAppName = x.processAppName;
    var type = x.type;
    var startURL = x.startURL;
    var runURL = x.runURL;
    
    log.info(&quot;Service: &quot; + type)

    if (x.type == &quot;service&quot;)
    {
        log.info(&quot;processAppName: &quot; + processAppName)
        log.info(&quot;display: &quot; + display)    
        log.info(&quot;title: &quot; + x.title)                    
        log.info(&quot;runURL: &quot; + runURL)        
    }

    if (type == &quot;process&quot;)
    {
        log.info(&quot;processAppName: &quot; + processAppName)
        log.info(&quot;type: &quot; + type)
        log.info(&quot;display: &quot; + display)                      
        log.info(&quot;startURL: &quot; + startURL)        
    }    
    
    if (display == name) { 
    	   log.info(&quot;Found Exposed Service: &quot; + runURL);
        vars.put(&quot;serviceURL&quot; , runURL);
        break;
    }
}
log.info(&quot;========================================================================================&quot;);</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is Benchmark URL OK?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="65509">BAD</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">6</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">benchURL</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Start BPD" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="parts" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">all</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">parts</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${exposedURL}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">https://${SERVER_HOST}:${SERVER_PORT}/rest/bpm/wle/v1/exposed?dojo.preventCache=1347121983915</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="JSON Parse for Instance ID" enabled="true">
                <stringProp name="TestPlan.comments">Get the URL that will start a new process</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;===================================== Start BPD =====================================&quot;);
// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());

vars.put(&quot;instanceID&quot;,SearchResponse.data.piid);
log.info(&quot;instanceID: &quot; + SearchResponse.data.piid);
log.info(&quot;=====================================================================================&quot;);</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFPostProcessor>
              <hashTree/>
            </hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="true">
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="RandomTimer.range">${THINK_TIME}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="true">
            <stringProp name="ConstantTimer.delay">0</stringProp>
            <stringProp name="RandomTimer.range">${THINK_TIME}</stringProp>
          </UniformRandomTimer>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Submit job requisition Human Service" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Current Task ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${BPM_REST_PROCESS}/${instanceID}?parts=header</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Just simulating some Portal activity</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSON Parse for TaskID" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;================================= Get Current Task ID =================================&quot;);
// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());

vars.put(&quot;taskID&quot;,&quot;BAD&quot;);
vars.put(&quot;keepProcessing&quot;,&quot;TRUE&quot;);
vars.put(&quot;keepFetchingTask&quot;,&quot;TRUE&quot;);
vars.put(&quot;getTaskID&quot;,0);

var tasks = SearchResponse.data.tasks;
vars.put(&quot;processState&quot;,SearchResponse.data.state);

if(SearchResponse.status == 200) {
	vars.put(&quot;getTaskID&quot;,SearchResponse.status);
}

log.info(&quot;processState : &quot; + SearchResponse.data.state);

var j = 0;
vars.put(&quot;taskCount&quot;,j);

var state = SearchResponse.data.state;
log.info(&quot;state: &quot; + state);
if(state == &quot;STATE_RUNNING&quot;) {
	for(var i=0; i &lt;tasks.length; i++) {
		var taskState = tasks[i].state;
		var taskStatus = tasks[i].status;		
		log.info(&quot;taskState: &quot; + taskState);
		log.info(&quot;taskStatus: &quot; + taskStatus);
		if (taskState == &quot;STATE_READY&quot; || taskState == &quot;STATE_CLAIMED&quot;) {
			if(taskStatus == &quot;Received&quot; || taskStatus == &quot;New&quot;) {
				vars.put(&quot;taskID&quot;,SearchResponse.data.tasks[i].tkiid);
				log.info(&quot;taskID : &quot; + SearchResponse.data.tasks[i].tkiid);
				j++;					
				break;
			}
		}
	}
}
log.info(&quot;=======================================================================================&quot;);</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Current Task URL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/task/${taskID}/clientSettings/IBM_WLE_Coach</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">https://${SERVER_HOST}:${SERVER_PORT}/rest/bpm/wle/v1/task/${taskID}/clientSettings/IBM_WLE_Coach</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response AssertionIs page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1421252768">{&quot;url&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Parse Coach" enabled="false">
                <stringProp name="TestPlan.comments">Parse the results of the coach looking for good stuff</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">log.info(&quot;============================ Submit Create Requisition Coach ============================&quot;);
// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var response = &apos; + prev.getResponseDataAsString());

log.info(&quot;Parse Coach: &quot; + response);

vars.put(&quot;taskURL&quot;,response.data.url);
log.info(&quot;url: &quot; + vars.get(&quot;taskURL&quot;));
log.info(&quot;=========================================================================================&quot;);</stringProp>
              </BSFPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get URL" enabled="true">
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;url&quot;:&quot;(.+?)&quot;}</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.refname">taskUrl</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Task Actions" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/task/actions?taskIDs=${taskID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">The portal does an awful lot of this</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Requisition Coach" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request Create Requisition Coach" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${taskUrl}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://${SERVER_HOST}:${SERVER_PORT}/${taskUrl}</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response AssertionIs page available?" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-528239091">&lt;title&gt;Create Requisition Coach&lt;/title&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                </ResponseAssertion>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Parse Coach" enabled="true">
                  <stringProp name="TestPlan.comments">Parse the results of the coach looking for good stuff</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">log.info(&quot;=========================== Request Create Requisition Coach ===========================&quot;);


// first set BAD values in case this script fails. Then we have a place to look for the problem.
vars.put(&quot;zComponentId&quot;,&apos;BAD&apos;);
vars.put(&quot;zComponentName&quot;,&apos;BAD&apos;);
vars.put(&quot;zTaskId&quot;,&apos;BAD&apos;);
vars.put(&quot;applicationId&quot;,&apos;BAD&apos;);
vars.put(&quot;applicationInstanceId&quot;,&apos;BAD&apos;);
vars.put(&quot;zWorkflowState&quot;,&apos;BAD&apos;);
vars.put(&quot;zDbg&quot;,&apos;BAD&apos;);
vars.put(&quot;validateBoundaryEventId&quot;,&apos;BAD&apos;);
vars.put(&quot;validateBoundaryEventEndStateId&quot;,&apos;BAD&apos;);
vars.put(&quot;boundaryEventEndStateId&quot;,&apos;BAD&apos;);
vars.put(&quot;boundaryEventId&quot;,&apos;BAD&apos;);



var response=prev.getResponseDataAsString();

// find the part that describes the system data
var n=response.indexOf(&quot;systemData =&quot;);
//result = result.substring(&quot;systemData =&quot;.length,n-1);
//var result=response.substring(n + &quot;systemData =&quot;.length);
var result=response.substring(n);
//log.info(&quot;Result First: &quot; + result);

//n = result.indexOf(&quot;}; //initData&quot;);
n = result.indexOf(&quot;this.boundaryEventData&quot;);

result = result.substring(0,n-1);

//log.info(&quot;Result Second: &quot; + result);

eval(&quot;var &quot;+result);
//var systemData=eval(result);
//log.info(&quot;Result Third: &quot; + systemData);


//vars.put(&quot;taskOwnerUserName&quot;,systemData.taskOwnerUserName);

vars.put(&quot;zComponentId&quot;,systemData.zComponentId);
vars.put(&quot;zComponentName&quot;,systemData.zComponentName);
vars.put(&quot;zTaskId&quot;,systemData.zTaskId);
vars.put(&quot;applicationId&quot;,systemData.applicationId);
vars.put(&quot;applicationInstanceId&quot;,systemData.applicationInstanceId);
vars.put(&quot;zWorkflowState&quot;,systemData.zWorkflowState);
vars.put(&quot;zDbg&quot;,systemData.zDbg);
vars.put(&quot;boundaryEventEndStateId&quot;,systemData.boundaryEventInformation[0].endStateID);
vars.put(&quot;boundaryEventId&quot;,systemData.boundaryEventInformation[0].boundaryEventID);
vars.put(&quot;validateBoundaryEventId&quot;,systemData.validateBoundaryEventInformation[0].boundaryEventID);
vars.put(&quot;validateBoundaryEventEndStateId&quot;,systemData.validateBoundaryEventInformation[0].endStateID);


log.info(&quot;zComponentId: &quot; + vars.get(&quot;zComponentId&quot;));
log.info(&quot;zComponentName: &quot; + vars.get(&quot;zComponentName&quot;));
log.info(&quot;zTaskId: &quot; + vars.get(&quot;zTaskId&quot;));
log.info(&quot;applicationId: &quot; + vars.get(&quot;applicationId&quot;));
log.info(&quot;applicationInstanceId: &quot; + vars.get(&quot;applicationInstanceId&quot;));
log.info(&quot;zWorkflowState: &quot; + vars.get(&quot;zWorkflowState&quot;));
log.info(&quot;zDbg: &quot; + vars.get(&quot;zDbg&quot;));
log.info(&quot;boundaryEventEndStateId: &quot; + vars.get(&quot;boundaryEventEndStateId&quot;));
log.info(&quot;boundaryEventId: &quot; + vars.get(&quot;boundaryEventId&quot;));
log.info(&quot;validateBoundaryEventId: &quot; + vars.get(&quot;validateBoundaryEventId&quot;));
log.info(&quot;validateBoundaryEventEndStateId: &quot; + vars.get(&quot;validateBoundaryEventEndStateId&quot;));

log.info(&quot;========================================================================================&quot;);</stringProp>
                </BSFPostProcessor>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Parse Coach" enabled="false">
                  <stringProp name="TestPlan.comments">Parse the results of the coach looking for good stuff</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">// Turn the JSON into an object called &apos;SearchResponse&apos;


// first set BAD values in case this script fails. Then we have a place to look for the problem.
vars.put(&quot;zComponentId&quot;,&apos;BAD&apos;);
vars.put(&quot;zComponentName&quot;,&apos;BAD&apos;);
vars.put(&quot;zTaskId&quot;,&apos;BAD&apos;);
vars.put(&quot;applicationId&quot;,&apos;BAD&apos;);
vars.put(&quot;applicationInstanceId&quot;,&apos;BAD&apos;);
vars.put(&quot;zWorkflowState&quot;,&apos;BAD&apos;);
vars.put(&quot;zDbg&quot;,&apos;BAD&apos;);
vars.put(&quot;boundaryEventEndStateId&quot;,&apos;BAD&apos;);
vars.put(&quot;boundaryEventId&quot;,&apos;BAD&apos;);

var response =  prev.getResponseDataAsString();

// find the part that describes the system data
var n=response.indexOf(&quot;systemData =&quot;);

var result = response.substring(n);

n = result.indexOf(&quot;}; //initData&quot;);

result = result.substring(0,n-1);
log.info(&quot;Result: &quot; + result);

eval(&quot;var &quot;+result);


//vars.put(&quot;taskOwnerUserName&quot;,systemData.taskOwnerUserName);
log.info(&quot;systemData.zComponentId: &quot; + systemData.zComponentId);
//vars.put(&quot;zComponentId&quot;,systemData.zComponentId);
//vars.put(&quot;zComponentName&quot;,systemData.zComponentName);
//vars.put(&quot;zTaskId&quot;,systemData.zTaskId);
//vars.put(&quot;applicationId&quot;,systemData.applicationId);
//vars.put(&quot;applicationInstanceId&quot;,systemData.applicationInstanceId);
//vars.put(&quot;zWorkflowState&quot;,systemData.zWorkflowState);
//vars.put(&quot;zDbg&quot;,systemData.zDbg);
//vars.put(&quot;boundaryEventEndStateId&quot;,systemData.boundaryEventInformation[1].endStateID);
//vars.put(&quot;boundaryEventId&quot;,systemData.boundaryEventInformation[1].boundaryEventID);
</stringProp>
                </BSFPostProcessor>
                <hashTree/>
              </hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="true">
                <stringProp name="ConstantTimer.delay">0</stringProp>
                <stringProp name="RandomTimer.range">${THINK_TIME}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Create Requisition Coach" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;boundaryEventInfo&quot;:{&quot;boundaryEventId&quot;:&quot;${boundaryEventId}&quot;,&quot;boundaryEventEndStateId&quot;:&quot;${boundaryEventEndStateId}&quot;,&quot;boundaryEventPath&quot;:&quot;Button1&quot;,&quot;boundaryEventComplexObjDeltaFmt&quot;:&quot;8550&quot;,&quot;fireValidation&quot;:&quot;1&quot;},&quot;validateBoundaryEventInfo&quot;:{&quot;validateBoundaryEventId&quot;:&quot;${validateBoundaryEventId}&quot;,&quot;validateBoundaryEventEndStateId&quot;:&quot;${validateBoundaryEventEndStateId}&quot;},&quot;stateInfo&quot;:{&quot;zComponentId&quot;:&quot;${zComponentId}&quot;,&quot;zComponentName&quot;:&quot;${zComponentName}&quot;,&quot;zTaskId&quot;:&quot;${zTaskId}&quot;,&quot;zWorkflowState&quot;:&quot;${zWorkflowState}&quot;,&quot;applicationId&quot;:&quot;${applicationId}&quot;,&quot;applicationInstanceId&quot;:&quot;${applicationInstanceId}&quot;,&quot;zDbg&quot;:&quot;${zDbg}&quot;},&quot;data&quot;:{&quot;local&quot;:{&quot;requisition&quot;:{&quot;reqNum&quot;:&quot;1141&quot;,&quot;requestor&quot;:&quot;Tom Miller&quot;,&quot;status&quot;:&quot;Full-time&quot;,&quot;approvalNeeded&quot;:false,&quot;date&quot;:&quot;2016-02-24T19:07:33.667Z&quot;,&quot;department&quot;:&quot;Customer Service&quot;,&quot;location&quot;:&quot;Chicago&quot;,&quot;empNum&quot;:1,&quot;gmApproval&quot;:&quot;&quot;,&quot;gmComments&quot;:&quot;&quot;,&quot;instanceId&quot;:&quot;&quot;},&quot;currentPosition&quot;:{&quot;positionType&quot;:&quot;New&quot;,&quot;replacement&quot;:{&quot;lastName&quot;:&quot;Smith&quot;,&quot;firstName&quot;:&quot;Bob&quot;,&quot;supervisor&quot;:&quot;Ann Fisher&quot;,&quot;startDate&quot;:null,&quot;payLevel&quot;:&quot;8&quot;,&quot;payType&quot;:&quot;Excempt&quot;,&quot;notes&quot;:&quot;&quot;},&quot;jobTitle&quot;:&quot;Head of Product Development&quot;,&quot;iId&quot;:&quot;&quot;}}}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/teamworks/ajaxCoach</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://${SERVER_HOST}:${SERVER_PORT}/teamworks/ajaxCoach</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="266112814">&quot;event&quot;:&quot;taskCompleted&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1578674248">&quot;event&quot;:&quot;taskStateChanged&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                </ResponseAssertion>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Parse Coach" enabled="true">
                  <stringProp name="TestPlan.comments">Parse the results of the coach looking for good stuff</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">log.info(&quot;============================ Submit Create Requisition Coach ============================&quot;);
// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var response = &apos; + prev.getResponseDataAsString());

log.info(&quot;Parse Coach: &quot; + response);
//
//var event = response.event;
//var url = response.url;
vars.put(&quot;taskURL&quot;,response.url);

log.info(&quot;event: &quot; + response.event);
log.info(&quot;url: &quot; + vars.get(&quot;taskURL&quot;));
log.info(&quot;=========================================================================================&quot;);</stringProp>
                </BSFPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get URL" enabled="false">
                  <stringProp name="RegexExtractor.default">NotThere</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;url&quot;:&quot;(.+?)&quot;}</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.refname">nextUrl</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="true">
                <stringProp name="ConstantTimer.delay">0</stringProp>
                <stringProp name="RandomTimer.range">${THINK_TIME}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="true">
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="RandomTimer.range">${THINK_TIME}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Confirm Position Details Controller" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Confirm Position Details Coach" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">${taskURL}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://${SERVER_HOST}:${SERVER_PORT}/${taskURL}</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-970932320">&lt;title&gt;Confirm Position Details Coach&lt;/title&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                </ResponseAssertion>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Parse Coach" enabled="true">
                  <stringProp name="TestPlan.comments">Parse the results of the coach looking for good stuff</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">log.info(&quot;=========================== Confirm Position Details Coach ===========================&quot;)

// first set BAD values in case this script fails. Then we have a place to look for the problem.
vars.put(&quot;zComponentId&quot;,&apos;BAD&apos;);
vars.put(&quot;zComponentName&quot;,&apos;BAD&apos;);
vars.put(&quot;zTaskId&quot;,&apos;BAD&apos;);
vars.put(&quot;applicationId&quot;,&apos;BAD&apos;);
vars.put(&quot;applicationInstanceId&quot;,&apos;BAD&apos;);
vars.put(&quot;zWorkflowState&quot;,&apos;BAD&apos;);
vars.put(&quot;zDbg&quot;,&apos;BAD&apos;);
vars.put(&quot;validateBoundaryEventId&quot;,&apos;BAD&apos;);
vars.put(&quot;validateBoundaryEventEndStateId&quot;,&apos;BAD&apos;);
vars.put(&quot;boundaryEventEndStateId&quot;,&apos;BAD&apos;);
vars.put(&quot;boundaryEventId&quot;,&apos;BAD&apos;);

var response=prev.getResponseDataAsString();

// find the part that describes the system data
var n=response.indexOf(&quot;systemData =&quot;);
//result = result.substring(&quot;systemData =&quot;.length,n-1);
//var result=response.substring(n + &quot;systemData =&quot;.length);
var result=response.substring(n);
//log.info(&quot;Result First: &quot; + result);

//n = result.indexOf(&quot;}; //initData&quot;);
n = result.indexOf(&quot;this.boundaryEventData&quot;);

result = result.substring(0,n-1);
//log.info(&quot;Result Second: &quot; + result);

eval(&quot;var &quot;+result);
//var systemData=eval(result);
//log.info(&quot;Result Third: &quot; + systemData);

//DSP TODO
//              this.systemData = {zComponentId : &quot;3028.7336e064-547c-4269-858f-6e8321af5563&quot;,
//								 zComponentName : &quot;CoachNG&quot;,
//								 zTaskId : &quot;t174&quot;,
//								 taskOwnerId: &quot;9&quot;,
//								 taskOwnerUserName: &quot;deadmin&quot;,
//								 applicationId :	&quot;1&quot;,
//								 applicationInstanceId : &quot;null&quot;,
//								 zWorkflowState : &quot;3&quot;,
//								 zDbg : &quot;0&quot;,
//  	    						 boundaryEventInformation : [
//  	    						     {
//  	    						      boundaryEventID : &quot;boundaryEvent_1&quot;,
//  	    						      endStateID : &quot;b1f61a0c-de78-47b4-b1c9-a26be3999c71&quot;,
//  	    						      fireValidation : 0
//  	    						     },
//  	    						     {
//  	    						      boundaryEventID : &quot;boundaryEvent_2&quot;,
//  	    						      endStateID : &quot;5e50ae2a-aa93-4f05-845a-5c4b33a54ed8&quot;,
//  	    						      fireValidation : 0
//  	    						     }
//								 ],
//								 validateBoundaryEventInformation : [
//  	    						 ]
//              }
//              this.boundaryEventData = {&quot;Button2&quot;:&quot;boundaryEvent_2&quot;,&quot;Button1&quot;:&quot;boundaryEvent_1&quot;}	

//vars.put(&quot;taskOwnerUserName&quot;,systemData.taskOwnerUserName);
vars.put(&quot;zComponentId&quot;,systemData.zComponentId);
vars.put(&quot;zComponentName&quot;,systemData.zComponentName);
vars.put(&quot;zTaskId&quot;,systemData.zTaskId);
vars.put(&quot;applicationId&quot;,systemData.applicationId);
vars.put(&quot;applicationInstanceId&quot;,systemData.applicationInstanceId);
vars.put(&quot;zWorkflowState&quot;,systemData.zWorkflowState);
vars.put(&quot;zDbg&quot;,systemData.zDbg);

var boundaryEventInformation = systemData.boundaryEventInformation[1];
vars.put(&quot;boundaryEventEndStateId&quot;,boundaryEventInformation.endStateID);
vars.put(&quot;boundaryEventId&quot;,boundaryEventInformation.boundaryEventID); 
//These are null
//vars.put(&quot;validateBoundaryEventId&quot;,systemData.validateBoundaryEventInformation[1].boundaryEventID);
//vars.put(&quot;validateBoundaryEventEndStateId&quot;,systemData.validateBoundaryEventInformation[1].endStateID);


log.info(&quot;zComponentId: &quot; + vars.get(&quot;zComponentId&quot;));
log.info(&quot;zComponentName: &quot; + vars.get(&quot;zComponentName&quot;));
log.info(&quot;zTaskId: &quot; + vars.get(&quot;zTaskId&quot;));
log.info(&quot;applicationId: &quot; + vars.get(&quot;applicationId&quot;));
log.info(&quot;applicationInstanceId: &quot; + vars.get(&quot;applicationInstanceId&quot;));
log.info(&quot;zWorkflowState: &quot; + vars.get(&quot;zWorkflowState&quot;));
log.info(&quot;zDbg: &quot; + vars.get(&quot;zDbg&quot;));
log.info(&quot;boundaryEventEndStateId: &quot; + vars.get(&quot;boundaryEventEndStateId&quot;));
log.info(&quot;boundaryEventId: &quot; + vars.get(&quot;boundaryEventId&quot;));
log.info(&quot;validateBoundaryEventId: &quot; + vars.get(&quot;validateBoundaryEventId&quot;));
log.info(&quot;validateBoundaryEventEndStateId: &quot; + vars.get(&quot;validateBoundaryEventEndStateId&quot;));

log.info(&quot;======================================================================================&quot;)
</stringProp>
                </BSFPostProcessor>
                <hashTree/>
              </hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="true">
                <stringProp name="ConstantTimer.delay">0</stringProp>
                <stringProp name="RandomTimer.range">${THINK_TIME}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Confirm Position Details Coach" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;boundaryEventInfo&quot;:{&quot;boundaryEventId&quot;:&quot;${boundaryEventId}&quot;,&quot;boundaryEventEndStateId&quot;:&quot;${boundaryEventEndStateId}&quot;,&quot;boundaryEventPath&quot;:&quot;Button2&quot;,&quot;boundaryEventComplexObjDeltaFmt&quot;:&quot;8550&quot;,&quot;fireValidation&quot;:&quot;0&quot;},&quot;stateInfo&quot;:{&quot;zComponentId&quot;:&quot;${zComponentId}&quot;,&quot;zComponentName&quot;:&quot;${zComponentName}&quot;,&quot;zTaskId&quot;:&quot;${zTaskId}&quot;,&quot;zWorkflowState&quot;:&quot;${zWorkflowState}&quot;,&quot;applicationId&quot;:&quot;${applicationId}&quot;,&quot;applicationInstanceId&quot;:&quot;${applicationInstanceId}&quot;,&quot;zDbg&quot;:&quot;${zDbg}&quot;},&quot;data&quot;:{&quot;local&quot;:{&quot;requisition&quot;:{&quot;reqNum&quot;:&quot;1141&quot;,&quot;requestor&quot;:&quot;Tom Miller&quot;,&quot;status&quot;:&quot;Full-time&quot;,&quot;approvalNeeded&quot;:false,&quot;date&quot;:&quot;2016-03-09T19:52:54.378Z&quot;,&quot;department&quot;:&quot;Customer Service&quot;,&quot;location&quot;:&quot;Chicago&quot;,&quot;empNum&quot;:1,&quot;gmApproval&quot;:&quot;&quot;,&quot;gmComments&quot;:&quot;&quot;,&quot;instanceId&quot;:&quot;&quot;},&quot;currentPosition&quot;:{&quot;positionType&quot;:&quot;New&quot;,&quot;replacement&quot;:{&quot;lastName&quot;:&quot;Smith&quot;,&quot;firstName&quot;:&quot;Bob&quot;,&quot;supervisor&quot;:&quot;Ann Fisher&quot;,&quot;startDate&quot;:null,&quot;payLevel&quot;:&quot;8&quot;,&quot;payType&quot;:&quot;Excempt&quot;,&quot;notes&quot;:&quot;&quot;},&quot;jobTitle&quot;:&quot;Head of Product Development&quot;,&quot;iId&quot;:&quot;&quot;}}}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/teamworks/ajaxCoach</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://${SERVER_HOST}:${SERVER_PORT}/teamworks/ajaxCoach</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="266112814">&quot;event&quot;:&quot;taskCompleted&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="266112814">&quot;event&quot;:&quot;taskCompleted&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                </ResponseAssertion>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Parse Coach" enabled="true">
                  <stringProp name="TestPlan.comments">Parse the results of the coach looking for good stuff</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var response = &apos; + prev.getResponseDataAsString());

log.info(&quot;Parse Coach: &quot; + response);
//
//var event = response.event;
//var url = response.url;
vars.put(&quot;nextURL&quot;,response.url);

log.info(&quot;event: &quot; + response.event);
log.info(&quot;url: &quot; + vars.get(&quot;nextURL&quot;));</stringProp>
                </BSFPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get URL" enabled="false">
                  <stringProp name="RegexExtractor.default">NotThere</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;url&quot;:&quot;(.+?)&quot;}</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.refname">nextUrl</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="true">
                <stringProp name="ConstantTimer.delay">0</stringProp>
                <stringProp name="RandomTimer.range">${THINK_TIME}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="true">
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="RandomTimer.range">${THINK_TIME}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Complete URL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${nextURL}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Call the URL from Submit Coach. This should call ${completeURL}, but I had issues with it</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="340556308">process finished=&quot;true&quot; </stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="true">
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="RandomTimer.range">${THINK_TIME}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Approve or reject job requisition Human Service" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Current Task ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${BPM_REST_PROCESS}/${instanceID}?parts=header</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Just simulating some Portal activity</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSON Parse for TaskID" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;================================= Get Current Task ID =================================&quot;);
// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());

vars.put(&quot;taskID&quot;,&quot;BAD&quot;);
vars.put(&quot;keepProcessing&quot;,&quot;TRUE&quot;);
vars.put(&quot;keepFetchingTask&quot;,&quot;TRUE&quot;);
vars.put(&quot;getTaskID&quot;,0);

var tasks = SearchResponse.data.tasks;
vars.put(&quot;processState&quot;,SearchResponse.data.state);

if(SearchResponse.status == 200) {
	vars.put(&quot;getTaskID&quot;,SearchResponse.status);
}

log.info(&quot;processState : &quot; + SearchResponse.data.state);

var j = 0;

var state = SearchResponse.data.state;
log.info(&quot;state: &quot; + state);
if(state == &quot;STATE_RUNNING&quot;) {
	for(var i=0; i &lt;tasks.length; i++) {
		var taskState = tasks[i].state;
		var taskStatus = tasks[i].status;		
		log.info(&quot;taskState: &quot; + taskState);
		log.info(&quot;taskStatus: &quot; + taskStatus);
		if (taskState == &quot;STATE_READY&quot; || taskState == &quot;STATE_CLAIMED&quot;) {
			if(taskStatus == &quot;Received&quot; || taskStatus == &quot;New&quot;) {
				vars.put(&quot;taskID&quot;,SearchResponse.data.tasks[i].tkiid);
				log.info(&quot;taskID : &quot; + SearchResponse.data.tasks[i].tkiid);
				j++;					
				break;
			}
		}
	}
}
log.info(&quot;=======================================================================================&quot;);</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="true">
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="RandomTimer.range">${THINK_TIME}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Current Task URL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/task/${taskID}/clientSettings/IBM_WLE_Coach</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">https://${SERVER_HOST}:${SERVER_PORT}/rest/bpm/wle/v1/task/${taskID}/clientSettings/IBM_WLE_Coach</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response AssertionIs page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1421252768">{&quot;url&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Parse Coach" enabled="false">
                <stringProp name="TestPlan.comments">Parse the results of the coach looking for good stuff</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">log.info(&quot;============================ Submit Create Requisition Coach ============================&quot;);
// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var response = &apos; + prev.getResponseDataAsString());

log.info(&quot;Parse Coach: &quot; + response);
//
//var event = response.event;
//var url = response.url;
vars.put(&quot;taskURL&quot;,response.url);

log.info(&quot;event: &quot; + response.event);
log.info(&quot;url: &quot; + vars.get(&quot;taskURL&quot;));
log.info(&quot;=========================================================================================&quot;);</stringProp>
              </BSFPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get URL" enabled="true">
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;url&quot;:&quot;(.+?)&quot;}</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.refname">taskUrl</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="true">
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="RandomTimer.range">${THINK_TIME}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Task Actions" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/task/actions?taskIDs=${taskID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">The portal does an awful lot of this</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Requisition Approval Coach" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request Requisition Approval Coach" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${taskUrl}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://${SERVER_HOST}:${SERVER_PORT}/${taskUrl}</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response AssertionIs page available?" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2145843876">&lt;title&gt;Requisition Approval Coach&lt;/title&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                </ResponseAssertion>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Parse Coach" enabled="true">
                  <stringProp name="TestPlan.comments">Parse the results of the coach looking for good stuff</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">log.info(&quot;=========================== Request Create Requisition Coach ===========================&quot;);


// first set BAD values in case this script fails. Then we have a place to look for the problem.
vars.put(&quot;zComponentId&quot;,&apos;BAD&apos;);
vars.put(&quot;zComponentName&quot;,&apos;BAD&apos;);
vars.put(&quot;zTaskId&quot;,&apos;BAD&apos;);
vars.put(&quot;applicationId&quot;,&apos;BAD&apos;);
vars.put(&quot;applicationInstanceId&quot;,&apos;BAD&apos;);
vars.put(&quot;zWorkflowState&quot;,&apos;BAD&apos;);
vars.put(&quot;zDbg&quot;,&apos;BAD&apos;);
vars.put(&quot;validateBoundaryEventId&quot;,&apos;BAD&apos;);
vars.put(&quot;validateBoundaryEventEndStateId&quot;,&apos;BAD&apos;);
vars.put(&quot;boundaryEventEndStateId&quot;,&apos;BAD&apos;);
vars.put(&quot;boundaryEventId&quot;,&apos;BAD&apos;);



var response=prev.getResponseDataAsString();

// find the part that describes the system data
var n=response.indexOf(&quot;systemData =&quot;);
//result = result.substring(&quot;systemData =&quot;.length,n-1);
//var result=response.substring(n + &quot;systemData =&quot;.length);
var result=response.substring(n);
//log.info(&quot;Result First: &quot; + result);

//n = result.indexOf(&quot;}; //initData&quot;);
n = result.indexOf(&quot;this.boundaryEventData&quot;);

result = result.substring(0,n-1);

//log.info(&quot;Result Second: &quot; + result);

eval(&quot;var &quot;+result);
//var systemData=eval(result);
//log.info(&quot;Result Third: &quot; + systemData);


//vars.put(&quot;taskOwnerUserName&quot;,systemData.taskOwnerUserName);

vars.put(&quot;zComponentId&quot;,systemData.zComponentId);
vars.put(&quot;zComponentName&quot;,systemData.zComponentName);
vars.put(&quot;zTaskId&quot;,systemData.zTaskId);
vars.put(&quot;applicationId&quot;,systemData.applicationId);
vars.put(&quot;applicationInstanceId&quot;,systemData.applicationInstanceId);
vars.put(&quot;zWorkflowState&quot;,systemData.zWorkflowState);
vars.put(&quot;zDbg&quot;,systemData.zDbg);
vars.put(&quot;boundaryEventEndStateId&quot;,systemData.boundaryEventInformation[0].endStateID);
vars.put(&quot;boundaryEventId&quot;,systemData.boundaryEventInformation[0].boundaryEventID);
//vars.put(&quot;validateBoundaryEventId&quot;,systemData.validateBoundaryEventInformation[1].boundaryEventID);
//vars.put(&quot;validateBoundaryEventEndStateId&quot;,systemData.validateBoundaryEventInformation[1].endStateID);


log.info(&quot;zComponentId: &quot; + vars.get(&quot;zComponentId&quot;));
log.info(&quot;zComponentName: &quot; + vars.get(&quot;zComponentName&quot;));
log.info(&quot;zTaskId: &quot; + vars.get(&quot;zTaskId&quot;));
log.info(&quot;applicationId: &quot; + vars.get(&quot;applicationId&quot;));
log.info(&quot;applicationInstanceId: &quot; + vars.get(&quot;applicationInstanceId&quot;));
log.info(&quot;zWorkflowState: &quot; + vars.get(&quot;zWorkflowState&quot;));
log.info(&quot;zDbg: &quot; + vars.get(&quot;zDbg&quot;));
log.info(&quot;boundaryEventEndStateId: &quot; + vars.get(&quot;boundaryEventEndStateId&quot;));
log.info(&quot;boundaryEventId: &quot; + vars.get(&quot;boundaryEventId&quot;));
log.info(&quot;validateBoundaryEventId: &quot; + vars.get(&quot;validateBoundaryEventId&quot;));
log.info(&quot;validateBoundaryEventEndStateId: &quot; + vars.get(&quot;validateBoundaryEventEndStateId&quot;));

log.info(&quot;========================================================================================&quot;);</stringProp>
                </BSFPostProcessor>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Parse Coach" enabled="false">
                  <stringProp name="TestPlan.comments">Parse the results of the coach looking for good stuff</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">// Turn the JSON into an object called &apos;SearchResponse&apos;


// first set BAD values in case this script fails. Then we have a place to look for the problem.
vars.put(&quot;zComponentId&quot;,&apos;BAD&apos;);
vars.put(&quot;zComponentName&quot;,&apos;BAD&apos;);
vars.put(&quot;zTaskId&quot;,&apos;BAD&apos;);
vars.put(&quot;applicationId&quot;,&apos;BAD&apos;);
vars.put(&quot;applicationInstanceId&quot;,&apos;BAD&apos;);
vars.put(&quot;zWorkflowState&quot;,&apos;BAD&apos;);
vars.put(&quot;zDbg&quot;,&apos;BAD&apos;);
vars.put(&quot;boundaryEventEndStateId&quot;,&apos;BAD&apos;);
vars.put(&quot;boundaryEventId&quot;,&apos;BAD&apos;);

var response =  prev.getResponseDataAsString();

// find the part that describes the system data
var n=response.indexOf(&quot;systemData =&quot;);

var result = response.substring(n);

n = result.indexOf(&quot;}; //initData&quot;);

result = result.substring(0,n-1);
log.info(&quot;Result: &quot; + result);

eval(&quot;var &quot;+result);


//vars.put(&quot;taskOwnerUserName&quot;,systemData.taskOwnerUserName);
log.info(&quot;systemData.zComponentId: &quot; + systemData.zComponentId);
//vars.put(&quot;zComponentId&quot;,systemData.zComponentId);
//vars.put(&quot;zComponentName&quot;,systemData.zComponentName);
//vars.put(&quot;zTaskId&quot;,systemData.zTaskId);
//vars.put(&quot;applicationId&quot;,systemData.applicationId);
//vars.put(&quot;applicationInstanceId&quot;,systemData.applicationInstanceId);
//vars.put(&quot;zWorkflowState&quot;,systemData.zWorkflowState);
//vars.put(&quot;zDbg&quot;,systemData.zDbg);
//vars.put(&quot;boundaryEventEndStateId&quot;,systemData.boundaryEventInformation[1].endStateID);
//vars.put(&quot;boundaryEventId&quot;,systemData.boundaryEventInformation[1].boundaryEventID);
</stringProp>
                </BSFPostProcessor>
                <hashTree/>
              </hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="true">
                <stringProp name="ConstantTimer.delay">0</stringProp>
                <stringProp name="RandomTimer.range">${THINK_TIME}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Requisition Approval Coach" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;boundaryEventInfo&quot;:{&quot;boundaryEventId&quot;:&quot;${boundaryEventId}&quot;,&quot;boundaryEventEndStateId&quot;:&quot;${boundaryEventEndStateId}&quot;,&quot;boundaryEventPath&quot;:&quot;Button1&quot;,&quot;boundaryEventComplexObjDeltaFmt&quot;:&quot;8550&quot;,&quot;fireValidation&quot;:&quot;0&quot;},&quot;stateInfo&quot;:{&quot;zComponentId&quot;:&quot;${zComponentId}&quot;,&quot;zComponentName&quot;:&quot;${zComponentName}&quot;,&quot;zTaskId&quot;:&quot;${zTaskId}&quot;,&quot;zWorkflowState&quot;:&quot;${zWorkflowState}&quot;,&quot;applicationId&quot;:&quot;${applicationId}&quot;,&quot;applicationInstanceId&quot;:&quot;${applicationInstanceId}&quot;,&quot;zDbg&quot;:&quot;${zDbg}&quot;},&quot;data&quot;:{&quot;local&quot;:{&quot;requisition&quot;:{&quot;reqNum&quot;:&quot;1141&quot;,&quot;requestor&quot;:&quot;Tom Miller&quot;,&quot;status&quot;:&quot;Full-time&quot;,&quot;approvalNeeded&quot;:true,&quot;date&quot;:&quot;2016-02-24T16:38:59.115Z&quot;,&quot;department&quot;:&quot;Customer Service&quot;,&quot;location&quot;:&quot;Chicago&quot;,&quot;empNum&quot;:1,&quot;gmApproval&quot;:&quot;&quot;,&quot;gmComments&quot;:&quot;Approved by Dave&quot;,&quot;instanceId&quot;:&quot;&quot;},&quot;currentPosition&quot;:{&quot;positionType&quot;:&quot;New&quot;,&quot;replacement&quot;:{&quot;lastName&quot;:&quot;Smith&quot;,&quot;firstName&quot;:&quot;Bob&quot;,&quot;supervisor&quot;:&quot;Ann Fisher&quot;,&quot;startDate&quot;:null,&quot;payLevel&quot;:&quot;8&quot;,&quot;payType&quot;:&quot;Excempt&quot;,&quot;notes&quot;:&quot;&quot;},&quot;jobTitle&quot;:&quot;Head of Product Development&quot;,&quot;iId&quot;:&quot;&quot;}}}}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/teamworks/ajaxCoach</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">https://${SERVER_HOST}:${SERVER_PORT}/teamworks/ajaxCoach</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="266112814">&quot;event&quot;:&quot;taskCompleted&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                </ResponseAssertion>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Parse Coach" enabled="true">
                  <stringProp name="TestPlan.comments">Parse the results of the coach looking for good stuff</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">log.info(&quot;============================ Submit Create Requisition Coach ============================&quot;);
// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var response = &apos; + prev.getResponseDataAsString());

log.info(&quot;Parse Coach: &quot; + response);
//
//var event = response.event;
//var url = response.url;
vars.put(&quot;taskURL&quot;,response.url);

log.info(&quot;event: &quot; + response.event);
log.info(&quot;url: &quot; + vars.get(&quot;taskURL&quot;));
log.info(&quot;=========================================================================================&quot;);</stringProp>
                </BSFPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get URL" enabled="false">
                  <stringProp name="RegexExtractor.default">NotThere</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;url&quot;:&quot;(.+?)&quot;}</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.refname">nextUrl</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="true">
                <stringProp name="ConstantTimer.delay">0</stringProp>
                <stringProp name="RandomTimer.range">${THINK_TIME}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="true">
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="RandomTimer.range">${THINK_TIME}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Complete URL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${nextURL}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Call the URL from Submit Coach. This should call ${completeURL}, but I had issues with it</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="340556308">process finished=&quot;true&quot; </stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="true">
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="RandomTimer.range">${THINK_TIME}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Log Out" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Log Out" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mum/logout</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">https://${SERVER_HOST}:${SERVER_PORT}/mum/logout</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <intProp name="Assertion.test_type">8</intProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="595420984">&lt;title&gt;Process Portal&lt;/title&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <intProp name="Assertion.test_type">2</intProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Archive" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Executing of other three Tasks" enabled="false"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="TestPlan.comments">Pick up the multi instance tasks</stringProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Executing remaining Tasks" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Query" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                  <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/tasks/query/IBM.DEFAULTALLTASKSLIST_75?selectedAttributes=TKIID&amp;interactionFilter=ASSESS_AND_WORK_ON&amp;size=26</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">Just simulating some Portal activity</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">taskID</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;TKIID&quot;:&quot;(.+?)&quot;}</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="true">
                  <stringProp name="ConstantTimer.delay">100</stringProp>
                  <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Instance" enabled="false">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                  <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">https://lp039.aimsrv.net:9443/rest/bpm/wle/v1/tasks/query/IBM.DEFAULTALLTASKSLIST_75?selectedAttributes=TAD_DISPLAY_NAME%2CPRIORITY%2CDUE%2CPI_DISPLAY_NAME%2CASSIGNED_TO_ROLE_DISPLAY_NAME%2CNAME%2CPI_PIID%2CPI_NAME%2COWNER%2CSTATE%2CIS_AT_RISK%2CTKIID&amp;interactionFilter=ASSESS_AND_WORK_ON&amp;size=26&amp;sortAttributes=IS_AT_RISK%20DESC%2CDUE%20ASC%2CTKIID%20ASC&amp;federationMode=true&amp;dojo.preventCache=1377112857696</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="JSON Parse for taskID" enabled="true">
                    <stringProp name="TestPlan.comments">Get the URL that will start a new process</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());

 vars.put(&quot;taskID&quot;,&quot;BAD&quot;);

var tasks = SearchResponse.data.tasks;
for(var i=0; i &lt;tasks.length; i++) {
    if (tasks[i].status == &quot;Received&quot; || tasks[i].status == &quot;New&quot;) {
        vars.put(&quot;taskID&quot;,SearchResponse.data.tasks[i].tkiid);
        vars.put(&quot;myTaskCount&quot;,i);
        break;
    }
}

</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="task count OK?" enabled="false">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1122230454">${taskCount}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">myTaskCount</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="increment Task Count" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">var taskCount =  + vars.get(&quot;taskCount&quot;);
taskCount++;
vars.put(&quot;taskCount&quot;,taskCount+&quot;&quot;);</stringProp>
                  </BSFPostProcessor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="task ID OK?" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="65509">BAD</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <intProp name="Assertion.test_type">12</intProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">taskID</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">${taskID} &gt; 0</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Task URL" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                    <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/task/${taskID}/clientSettings/IBM_WLE_Coach</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">https://localhost:9443/rest/bpm/wle/v1/task/240/clientSettings/IBM_WLE_Coach?federationMode=true&amp;dojo.preventCache=1347128807777</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response AssertionIs page available?" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49586">200</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1421252768">{&quot;url&quot;:</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get URL" enabled="true">
                      <stringProp name="RegexExtractor.default">-1</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;url&quot;:&quot;(.+?)&quot;}</stringProp>
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.refname">taskUrl</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Task Actions" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                    <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/task/actions?taskIDs=${taskID}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">The portal does an awful lot of this</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49586">200</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Call Task URL" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                    <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${taskUrl}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">https://localhost:9443/teamworks/process.lsw?zWorkflowState=1&amp;zTaskId=215&amp;coachDebugTrace=none</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response AssertionIs page available?" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49586">200</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">8</intProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1259682895">&lt;title&gt;Coach&lt;/title&gt;</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Parse Coach" enabled="true">
                      <stringProp name="TestPlan.comments">Parse the results of the coach looking for good stuff</stringProp>
                      <stringProp name="scriptLanguage">javascript</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">// Turn the JSON into an object called &apos;SearchResponse&apos;


// first set BAD values in case this script fails. Then we have a place to look for the problem.
vars.put(&quot;zComponentId&quot;,&apos;BAD&apos;);
vars.put(&quot;zComponentName&quot;,&apos;BAD&apos;);
vars.put(&quot;zTaskId&quot;,&apos;BAD&apos;);
vars.put(&quot;applicationId&quot;,&apos;BAD&apos;);
vars.put(&quot;applicationInstanceId&quot;,&apos;BAD&apos;);
vars.put(&quot;zWorkflowState&quot;,&apos;BAD&apos;);
vars.put(&quot;zDbg&quot;,&apos;BAD&apos;);
vars.put(&quot;boundaryEventEndStateId&quot;,&apos;BAD&apos;);
vars.put(&quot;boundaryEventId&quot;,&apos;BAD&apos;);

var response =  prev.getResponseDataAsString();

// find the part that describes the system data
var n=response.indexOf(&quot;systemData =&quot;);

var result = response.substring(n);

n = result.indexOf(&quot;}; //initData&quot;);

result = result.substring(0,n-1);

eval(&quot;var &quot;+result);


//vars.put(&quot;taskOwnerUserName&quot;,systemData.taskOwnerUserName);
vars.put(&quot;zComponentId&quot;,systemData.zComponentId);
vars.put(&quot;zComponentName&quot;,systemData.zComponentName);
vars.put(&quot;zTaskId&quot;,systemData.zTaskId);
vars.put(&quot;applicationId&quot;,systemData.applicationId);
vars.put(&quot;applicationInstanceId&quot;,systemData.applicationInstanceId);
vars.put(&quot;zWorkflowState&quot;,systemData.zWorkflowState);
vars.put(&quot;zDbg&quot;,systemData.zDbg);
vars.put(&quot;boundaryEventEndStateId&quot;,systemData.boundaryEventInformation[1].endStateID);
vars.put(&quot;boundaryEventId&quot;,systemData.boundaryEventInformation[1].boundaryEventID);
</stringProp>
                    </BSFPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Coach" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&quot;boundaryEventInfo&quot;:{&quot;boundaryEventId&quot;:&quot;${boundaryEventId}&quot;,&quot;boundaryEventEndStateId&quot;:&quot;${boundaryEventEndStateId}&quot;},&quot;stateInfo&quot;:{&quot;zComponentId&quot;:&quot;${zComponentId}&quot;,&quot;zComponentName&quot;:&quot;${zComponentName}&quot;,&quot;zTaskId&quot;:&quot;${zTaskId}&quot;,&quot;zWorkflowState&quot;:&quot;${zWorkflowState}&quot;,&quot;applicationId&quot;:&quot;${applicationId}&quot;,&quot;applicationInstanceId&quot;:&quot;${applicationInstanceId}&quot;,&quot;zDbg&quot;:&quot;${zDbg}&quot;},&quot;data&quot;:{&quot;local&quot;:{}}}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                    <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/teamworks/ajaxCoach</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">JSON Post data</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49586">200</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="266112814">&quot;event&quot;:&quot;taskCompleted&quot;</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get URL" enabled="true">
                      <stringProp name="RegexExtractor.default">NotThere</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;url&quot;:&quot;(.+?)&quot;}</stringProp>
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.refname">completeUrl</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Complete URL" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                    <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/teamworks/tm_process_finished.lsw?applicationInstanceId=null&amp;applicationId=1</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="TestPlan.comments">Call the URL from Submit Coach. This should call ${completeURL}, but I had issues with it</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49586">200</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <intProp name="Assertion.test_type">8</intProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="340556308">process finished=&quot;true&quot; </stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
              <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Execute Task" enabled="false">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-614127411">Performance Benchmark</stringProp>
              <stringProp name="1592491802">Application Thread</stringProp>
              <stringProp name="916551842">Archive</stringProp>
              <stringProp name="656814049">Executing of other three Tasks</stringProp>
              <stringProp name="-1640187240">Loop Controller</stringProp>
              <stringProp name="-722239626">Executing remaining Tasks</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="false">
            <stringProp name="IfController.condition">${taskID} &gt; 0</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Task URL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/task/${taskID}/clientSettings/IBM_WLE_Coach</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">https://localhost:9443/rest/bpm/wle/v1/task/240/clientSettings/IBM_WLE_Coach?federationMode=true&amp;dojo.preventCache=1347128807777</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response AssertionIs page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1421252768">{&quot;url&quot;:</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get URL" enabled="true">
                <stringProp name="RegexExtractor.default">-1</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;url&quot;:&quot;(.+?)&quot;}</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.refname">taskUrl</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Task Actions" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/task/actions?taskIDs=${taskID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">The portal does an awful lot of this</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Task Actions" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/task/actions?taskIDs=${taskID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">The portal does an awful lot of this</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Call Task URL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${taskUrl}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">https://localhost:9443/teamworks/process.lsw?zWorkflowState=1&amp;zTaskId=215&amp;coachDebugTrace=none</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response AssertionIs page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-528239091">&lt;title&gt;Create Requisition Coach&lt;/title&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Parse Coach" enabled="true">
                <stringProp name="TestPlan.comments">Parse the results of the coach looking for good stuff</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Turn the JSON into an object called &apos;SearchResponse&apos;
// Turn the JSON into an object called &apos;SearchResponse&apos;
//log.info(&quot;JSON: &quot; + prev.getResponseDataAsString());
//eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());
//log.info(&quot;Task URL: &quot; + ${taskUrl});
//log.info(&quot;JSON: &quot; + prev.getResponseDataAsString());

// first set BAD values in case this script fails. Then we have a place to look for the problem.
vars.put(&quot;zComponentId&quot;,&apos;BAD&apos;);
vars.put(&quot;zComponentName&quot;,&apos;BAD&apos;);
vars.put(&quot;zTaskId&quot;,&apos;BAD&apos;);
vars.put(&quot;applicationId&quot;,&apos;BAD&apos;);
vars.put(&quot;applicationInstanceId&quot;,&apos;BAD&apos;);
vars.put(&quot;zWorkflowState&quot;,&apos;BAD&apos;);
vars.put(&quot;zDbg&quot;,&apos;BAD&apos;);
vars.put(&quot;boundaryEventEndStateId&quot;,&apos;BAD&apos;);
vars.put(&quot;boundaryEventId&quot;,&apos;BAD&apos;);

var response =  prev.getResponseDataAsString();

// find the part that describes the system data
var n=response.indexOf(&quot;systemData =&quot;);

var result = response.substring(n+12);
//log.info(&quot;Result: &quot; + result);

//n = result.indexOf(&quot;}; //initData&quot;);
n = result.indexOf(&quot;this.boundaryEventData&quot;);

result = result.substring(0,n-1);

log.info(&quot;Result: &quot; + result);

eval(&quot;var &quot;+result);
log.info(&quot;Result: &quot; + result);




//vars.put(&quot;taskOwnerUserName&quot;,systemData.taskOwnerUserName);
log.info(&quot;result.zComponentId: &quot; + result.zComponentId)

vars.put(&quot;zComponentId&quot;,result.zComponentId);
vars.put(&quot;zComponentName&quot;,result.zComponentName);
vars.put(&quot;zTaskId&quot;,result.zTaskId);
vars.put(&quot;applicationId&quot;,result.applicationId);
vars.put(&quot;applicationInstanceId&quot;,result.applicationInstanceId);
vars.put(&quot;zWorkflowState&quot;,result.zWorkflowState);
vars.put(&quot;zDbg&quot;,result.zDbg);
vars.put(&quot;boundaryEventEndStateId&quot;,result.boundaryEventInformation[1].endStateID);
vars.put(&quot;boundaryEventId&quot;,result.boundaryEventInformation[1].boundaryEventID);


</stringProp>
              </BSFPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Coach" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;boundaryEventInfo&quot;:{&quot;boundaryEventId&quot;:&quot;${boundaryEventId}&quot;,&quot;boundaryEventEndStateId&quot;:&quot;${boundaryEventEndStateId}&quot;,&quot;boundaryEventPath&quot;:&quot;Button1&quot;,&quot;boundaryEventComplexObjDeltaFmt&quot;:&quot;8550&quot;,&quot;fireValidation&quot;:&quot;1&quot;},&quot;validateBoundaryEventInfo&quot;:{&quot;validateBoundaryEventId&quot;:&quot;validateBoundaryEvent_1&quot;,&quot;validateBoundaryEventEndStateId&quot;:&quot;32dff8d9-d673-4db8-8710-5729b1c32b8c&quot;},&quot;stateInfo&quot;:{&quot;zComponentId&quot;:&quot;${zComponentId}&quot;,&quot;zComponentName&quot;:&quot;${zComponentName}&quot;,&quot;zTaskId&quot;:&quot;${zTaskId}&quot;,&quot;zWorkflowState&quot;:&quot;${zWorkflowState}&quot;,&quot;applicationId&quot;:&quot;${applicationId}&quot;,&quot;applicationInstanceId&quot;:&quot;${applicationInstanceId}&quot;,&quot;zDbg&quot;:&quot;${zDbg}&quot;},&quot;data&quot;:{&quot;local&quot;:{&quot;requisition&quot;:{&quot;reqNum&quot;:&quot;1141&quot;,&quot;requestor&quot;:&quot;Tom Miller&quot;,&quot;status&quot;:&quot;Full-time&quot;,&quot;approvalNeeded&quot;:false,&quot;date&quot;:&quot;2016-01-20T18:29:35.314Z&quot;,&quot;department&quot;:&quot;Customer Service&quot;,&quot;location&quot;:&quot;Chicago&quot;,&quot;empNum&quot;:1,&quot;gmApproval&quot;:&quot;&quot;,&quot;gmComments&quot;:&quot;&quot;,&quot;instanceId&quot;:&quot;&quot;},&quot;currentPosition&quot;:{&quot;positionType&quot;:&quot;New&quot;,&quot;replacement&quot;:{&quot;lastName&quot;:&quot;Smith&quot;,&quot;firstName&quot;:&quot;Bob&quot;,&quot;supervisor&quot;:&quot;Ann Fisher&quot;,&quot;startDate&quot;:null,&quot;payLevel&quot;:&quot;8&quot;,&quot;payType&quot;:&quot;Excempt&quot;,&quot;notes&quot;:&quot;&quot;},&quot;jobTitle&quot;:&quot;Head of Product Development&quot;,&quot;iId&quot;:&quot;&quot;}}}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/teamworks/ajaxCoach</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">JSON Post data</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="266112814">&quot;event&quot;:&quot;taskCompleted&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get URL" enabled="true">
                <stringProp name="RegexExtractor.default">NotThere</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;url&quot;:&quot;(.+?)&quot;}</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.refname">completeUrl</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Complete URL" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/teamworks/tm_process_finished.lsw?applicationInstanceId=null&amp;applicationId=1</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="TestPlan.comments">Call the URL from Submit Coach. This should call ${completeURL}, but I had issues with it</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <intProp name="Assertion.test_type">8</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="340556308">process finished=&quot;true&quot; </stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <intProp name="Assertion.test_type">2</intProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Clean Up" enabled="false">
            <stringProp name="TestPlan.comments">Make sure we don&apos; t leave any instances laying around</stringProp>
          </OnceOnlyController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Query Active Instances" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Query Active" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="columns" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">instanceId,instanceStatus,bpdName</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">columns</stringProp>
                    </elementProp>
                    <elementProp name="condition" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">bpdName|${BPDName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">condition</stringProp>
                    </elementProp>
                    <elementProp name="condition" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">instanceStatus|Active</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">condition</stringProp>
                    </elementProp>
                    <elementProp name="organization" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">byInstance</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">organization</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/rest/bpm/wle/v1/search/query</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="TestPlan.comments">Get any active instances</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                </ResponseAssertion>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="JSON Parse for Active" enabled="true">
                  <stringProp name="TestPlan.comments">Get the URL that will start a new process</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());

if (SearchResponse.data.data == null) {
    vars.put(&apos;instanceActive&apos;,&apos;false&apos;);
} else {
    vars.put(&apos;instanceActive&apos;,&apos;true&apos;);
   vars.put(&apos;instanceID&apos;,SearchResponse.data.data[0].instanceId);
}


</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${instanceActive}</stringProp>
            </WhileController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Execute Task" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-614127411">Performance Benchmark</stringProp>
                  <stringProp name="-1220910765">StandardBench</stringProp>
                  <stringProp name="-1640187240">Loop Controller</stringProp>
                  <stringProp name="656814049">Executing of other three Tasks</stringProp>
                  <stringProp name="-1640187240">Loop Controller</stringProp>
                  <stringProp name="-722239626">Executing remaining Tasks</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Query Active Instances" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-614127411">Performance Benchmark</stringProp>
                  <stringProp name="-1220910765">StandardBench</stringProp>
                  <stringProp name="854761490">Clean Up</stringProp>
                  <stringProp name="-944082340">Query Active Instances</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Main Loop" enabled="false">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${LoopNumber}</stringProp>
          </LoopController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Start Business Process" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Start BPD" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="action" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${BPDStartAction}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">action</stringProp>
                    </elementProp>
                    <elementProp name="bpdId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${BPDID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">bpdId</stringProp>
                    </elementProp>
                    <elementProp name="snapshotId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${BPDSnapshotID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">snapshotId</stringProp>
                    </elementProp>
                    <elementProp name="params" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{ &quot;customerSession&quot;:{                                &quot;oneBillIndicator&quot;: &quot;&quot;,                 &quot;oneBillBO&quot;: {                                 &quot;atlanticIndicator&quot;: &quot;&quot;,                                 &quot;militaryExmeption&quot;: &quot;&quot;,                                 &quot;taxExmeption&quot;: &quot;&quot;,                                 &quot;languagePref&quot;: &quot;&quot;,                                 &quot;accountType&quot;: &quot;&quot;,                                 &quot;oneBillDate&quot;: null,                                 &quot;eBillIndicator&quot;: &quot;&quot;,                                 &quot;accountStatus&quot;: &quot;&quot;,                                 &quot;privilege&quot;: &quot;&quot;,                                 &quot;oneBillId&quot;: &quot;&quot;,                                 &quot;LOBBO&quot;: {                                                 &quot;homePhone&quot;: [{                                                                 &quot;dryLoopIndicator&quot;: &quot;&quot;,                                                                 &quot;BAN&quot;: &quot;&quot;,                                                                 &quot;TN&quot;: &quot;&quot;,                                                                 &quot;contactInfo&quot;: [{                                                                                 &quot;contactInfo&quot;: {                                                                                                 &quot;primary&quot;: &quot;&quot;,                                                                                                 &quot;workPhone&quot;: &quot;&quot;,                                                                                                 &quot;faxNumber&quot;: &quot;&quot;,                                                                                                 &quot;email&quot;: &quot;&quot;,                                                                                                 &quot;cellPhone&quot;: &quot;&quot;,                                                                                                 &quot;mainPhone&quot;: &quot;&quot;,                                                                                                 &quot;lastName&quot;: &quot;&quot;,                                                                                                 &quot;firstName&quot;: &quot;&quot;                                                                                 },                                                                                 &quot;address&quot;: {                                                                                                 &quot;aptNumber&quot;: &quot;&quot;,                                                                                                 &quot;postalCode&quot;: &quot;&quot;,                                                                                                 &quot;country&quot;: &quot;&quot;,                                                                                                 &quot;province&quot;: &quot;&quot;,                                                                                                 &quot;city&quot;: &quot;&quot;,                                                                                                 &quot;streetName&quot;: &quot;&quot;,                                                                                                 &quot;streetNumber&quot;: &quot;&quot;,                                                                                                 &quot;POBox&quot;: &quot;&quot;,                                                                                                 &quot;unit&quot;: &quot;&quot;                                                                                 }                                                                 }],                                                                 &quot;serviceInfo&quot;: {                                                                                 &quot;serviceStatus&quot;: &quot;&quot;,                                                                                 &quot;footPrint&quot;: &quot;&quot;,                                                                                 &quot;iQualified&quot;: &quot;&quot;,                                                                                 &quot;TN&quot;: &quot;&quot;,                                                                                 &quot;address&quot;: {                                                                                                 &quot;aptNumber&quot;: &quot;&quot;,                                                                                                 &quot;postalCode&quot;: &quot;&quot;,                                                                                                 &quot;country&quot;: &quot;&quot;,                                                                                                 &quot;province&quot;: &quot;&quot;,                                                                                                 &quot;city&quot;: &quot;&quot;,                                                                                                 &quot;streetName&quot;: &quot;&quot;,                                                                                                 &quot;streetNumber&quot;: &quot;&quot;,                                                                                                 &quot;POBox&quot;: &quot;&quot;,                                                                                                 &quot;unit&quot;: &quot;&quot;                                                                                 }                                                                 }                                                 }],                                                 &quot;internet&quot;: [{                                                                 &quot;b1Id&quot;: &quot;&quot;,                                                                 &quot;customerInfo&quot;: {                                                                                 &quot;contactInfo&quot;: {                                                                                                 &quot;primary&quot;: &quot;&quot;,                                                                                                 &quot;workPhone&quot;: &quot;&quot;,                                                                                                 &quot;faxNumber&quot;: &quot;&quot;,                                                                                                 &quot;email&quot;: &quot;&quot;,                                                                                                 &quot;cellPhone&quot;: &quot;&quot;,                                                                                                 &quot;mainPhone&quot;: &quot;&quot;,                                                                                                 &quot;lastName&quot;: &quot;&quot;,                                                                                                 &quot;firstName&quot;: &quot;&quot;                                                                                 },                                                                                 &quot;address&quot;: {                                                                                                 &quot;aptNumber&quot;: &quot;&quot;,                                                                                                 &quot;postalCode&quot;: &quot;&quot;,                                                                                                 &quot;country&quot;: &quot;&quot;,                                                                                                 &quot;province&quot;: &quot;&quot;,                                                                                                 &quot;city&quot;: &quot;&quot;,                                                                                                 &quot;streetName&quot;: &quot;&quot;,                                                                                                 &quot;streetNumber&quot;: &quot;&quot;,                                                                                                 &quot;POBox&quot;: &quot;&quot;,                                                                                                 &quot;unit&quot;: &quot;&quot;                                                                                 }                                                                 },                                                                 &quot;serviceInfo&quot;: {                                                                                 &quot;serviceStatus&quot;: &quot;&quot;,                                                                                 &quot;footPrint&quot;: &quot;&quot;,                                                                                 &quot;iQualified&quot;: &quot;&quot;,                                                                                 &quot;TN&quot;: &quot;&quot;,                                                                                 &quot;address&quot;: {                                                                                                 &quot;aptNumber&quot;: &quot;&quot;,                                                                                                 &quot;postalCode&quot;: &quot;&quot;,                                                                                                 &quot;country&quot;: &quot;&quot;,                                                                                                 &quot;province&quot;: &quot;&quot;,                                                                                                 &quot;city&quot;: &quot;&quot;,                                                                                                 &quot;streetName&quot;: &quot;&quot;,                                                                                                 &quot;streetNumber&quot;: &quot;&quot;,                                                                                                 &quot;POBox&quot;: &quot;&quot;,                                                                                                 &quot;unit&quot;: &quot;&quot;                                                                                 }                                                                 },                                                                 &quot;modem&quot;: {                                                                                 &quot;SN&quot;: &quot;&quot;,                                                                                 &quot;MAC&quot;: &quot;&quot;,                                                                                 &quot;model&quot;: &quot;&quot;,                                                                                 &quot;manufacturerName&quot;: &quot;&quot;                                                                 }                                                 }],                                                 &quot;fibeTV&quot;: [{                                                                 &quot;darkFibe&quot;: &quot;&quot;,                                                                 &quot;accountNumber&quot;: &quot;&quot;,                                                                 &quot;B1Id&quot;: &quot;&quot;,                                                                 &quot;customerInfo&quot;: {                                                                                 &quot;contactInfo&quot;: {                                                                                                 &quot;primary&quot;: &quot;&quot;,                                                                                                 &quot;workPhone&quot;: &quot;&quot;,                                                                                                 &quot;faxNumber&quot;: &quot;&quot;,                                                                                                 &quot;email&quot;: &quot;&quot;,                                                                                                 &quot;cellPhone&quot;: &quot;&quot;,                                                                                                 &quot;mainPhone&quot;: &quot;&quot;,                                                                                                 &quot;lastName&quot;: &quot;&quot;,                                                                                                 &quot;firstName&quot;: &quot;&quot;                                                                                 },                                                                                 &quot;address&quot;: {                                                                                                 &quot;aptNumber&quot;: &quot;&quot;,                                                                                                 &quot;postalCode&quot;: &quot;&quot;,                                                                                                 &quot;country&quot;: &quot;&quot;,                                                                                                 &quot;province&quot;: &quot;&quot;,                                                                                                 &quot;city&quot;: &quot;&quot;,                                                                                                 &quot;streetName&quot;: &quot;&quot;,                                                                                                 &quot;streetNumber&quot;: &quot;&quot;,                                                                                                 &quot;POBox&quot;: &quot;&quot;,                                                                                                 &quot;unit&quot;: &quot;&quot;                                                                                 }                                                                 },                                                                 &quot;serviceInfo&quot;: {                                                                                 &quot;serviceStatus&quot;: &quot;&quot;,                                                                                 &quot;footPrint&quot;: &quot;&quot;,                                                                                 &quot;iQualified&quot;: &quot;&quot;,                                                                                 &quot;TN&quot;: &quot;&quot;,                                                                                 &quot;address&quot;: {                                                                                                 &quot;aptNumber&quot;: &quot;&quot;,                                                                                                 &quot;postalCode&quot;: &quot;&quot;,                                                                                                 &quot;country&quot;: &quot;&quot;,                                                                                                 &quot;province&quot;: &quot;&quot;,                                                                                                 &quot;city&quot;: &quot;&quot;,                                                                                                 &quot;streetName&quot;: &quot;&quot;,                                                                                                 &quot;streetNumber&quot;: &quot;&quot;,                                                                                                 &quot;POBox&quot;: &quot;&quot;,                                                                                                 &quot;unit&quot;: &quot;&quot;                                                                                 }                                                                 },                                                                 &quot;STB&quot;: [{                                                                                 &quot;SN&quot;: &quot;&quot;,                                                                                 &quot;model&quot;: &quot;&quot;,                                                                                 &quot;manufacturerName&quot;: &quot;&quot;                                                                 }]                                                 }],                                                 &quot;bellMobility&quot;: [{                                                                 &quot;TN&quot;: &quot;&quot;,                                                                 &quot;customerInfo&quot;: {                                                                                 &quot;contactInfo&quot;: {                                                                                                 &quot;primary&quot;: &quot;&quot;,                                                                                                 &quot;workPhone&quot;: &quot;&quot;,                                                                                                 &quot;faxNumber&quot;: &quot;&quot;,                                                                                                 &quot;email&quot;: &quot;&quot;,                                                                                                 &quot;cellPhone&quot;: &quot;&quot;,                                                                                                 &quot;mainPhone&quot;: &quot;&quot;,                                                                                                 &quot;lastName&quot;: &quot;&quot;,                                                                                                 &quot;firstName&quot;: &quot;&quot;                                                                                 },                                                                                 &quot;address&quot;: {                                                                                                 &quot;aptNumber&quot;: &quot;&quot;,                                                                                                 &quot;postalCode&quot;: &quot;&quot;,                                                                                                 &quot;country&quot;: &quot;&quot;,                                                                                                 &quot;province&quot;: &quot;&quot;,                                                                                                 &quot;city&quot;: &quot;&quot;,                                                                                                 &quot;streetName&quot;: &quot;&quot;,                                                                                                 &quot;streetNumber&quot;: &quot;&quot;,                                                                                                 &quot;POBox&quot;: &quot;&quot;,                                                                                                 &quot;unit&quot;: &quot;&quot;                                                                                 }                                                                 },                                                                 &quot;serviceInfo&quot;: {                                                                                 &quot;serviceStatus&quot;: &quot;&quot;,                                                                                 &quot;footPrint&quot;: &quot;&quot;,                                                                                 &quot;iQualified&quot;: &quot;&quot;,                                                                                 &quot;TN&quot;: &quot;&quot;,                                                                                 &quot;address&quot;: {                                                                                                 &quot;aptNumber&quot;: &quot;&quot;,                                                                                                 &quot;postalCode&quot;: &quot;&quot;,                                                                                                 &quot;country&quot;: &quot;&quot;,                                                                                                 &quot;province&quot;: &quot;&quot;,                                                                                                 &quot;city&quot;: &quot;&quot;,                                                                                                 &quot;streetName&quot;: &quot;&quot;,                                                                                                 &quot;streetNumber&quot;: &quot;&quot;,                                                                                                 &quot;POBox&quot;: &quot;&quot;,                                                                                                 &quot;unit&quot;: &quot;&quot;                                                                                 }                                                                 },                                                                 &quot;device&quot;: {                                                                                 &quot;SIM&quot;: &quot;&quot;,                                                                                 &quot;SN&quot;: &quot;&quot;,                                                                                 &quot;model&quot;: &quot;&quot;,                                                                                 &quot;manufacturerName&quot;: &quot;&quot;                                                                 }                                                 }],                                                 &quot;DTH&quot;: [{                                                                 &quot;customerInfo&quot;: {                                                                                 &quot;contactInfo&quot;: {                                                                                                 &quot;primary&quot;: &quot;&quot;,                                                                                                 &quot;workPhone&quot;: &quot;&quot;,                                                                                                 &quot;faxNumber&quot;: &quot;&quot;,                                                                                                 &quot;email&quot;: &quot;&quot;,                                                                                                 &quot;cellPhone&quot;: &quot;&quot;,                                                                                                 &quot;mainPhone&quot;: &quot;&quot;,                                                                                                 &quot;lastName&quot;: &quot;&quot;,                                                                                                 &quot;firstName&quot;: &quot;&quot;                                                                                 },                                                                                 &quot;address&quot;: {                                                                                                 &quot;aptNumber&quot;: &quot;&quot;,                                                                                                 &quot;postalCode&quot;: &quot;&quot;,                                                                                                 &quot;country&quot;: &quot;&quot;,                                                                                                 &quot;province&quot;: &quot;&quot;,                                                                                                 &quot;city&quot;: &quot;&quot;,                                                                                                 &quot;streetName&quot;: &quot;&quot;,                                                                                                 &quot;streetNumber&quot;: &quot;&quot;,                                                                                                 &quot;POBox&quot;: &quot;&quot;,                                                                                                 &quot;unit&quot;: &quot;&quot;                                                                                 }                                                                 },                                                                 &quot;serviceInfo&quot;: {                                                                                 &quot;serviceStatus&quot;: &quot;&quot;,                                                                                 &quot;footPrint&quot;: &quot;&quot;,                                                                                 &quot;iQualified&quot;: &quot;&quot;,                                                                                 &quot;TN&quot;: &quot;&quot;,                                                                                 &quot;address&quot;: {                                                                                                 &quot;aptNumber&quot;: &quot;&quot;,                                                                                                 &quot;postalCode&quot;: &quot;&quot;,                                                                                                 &quot;country&quot;: &quot;&quot;,                                                                                                 &quot;province&quot;: &quot;&quot;,                                                                                                 &quot;city&quot;: &quot;&quot;,                                                                                                 &quot;streetName&quot;: &quot;&quot;,                                                                                                 &quot;streetNumber&quot;: &quot;&quot;,                                                                                                 &quot;POBox&quot;: &quot;&quot;,                                                                                                 &quot;unit&quot;: &quot;&quot;                                                                                 }                                                                 }                                                 }]                                 }                 },                 &quot;customerInfo&quot;: {                                 &quot;contactInfo&quot;: {                                                 &quot;primary&quot;: &quot;&quot;,                                                 &quot;workPhone&quot;: &quot;&quot;,                                                 &quot;faxNumber&quot;: &quot;&quot;,                                                 &quot;email&quot;: &quot;&quot;,                                                 &quot;cellPhone&quot;: &quot;&quot;,                                                 &quot;mainPhone&quot;: &quot;&quot;,                                                 &quot;lastName&quot;: &quot;&quot;,                                                 &quot;firstName&quot;: &quot;&quot;                                 },                                 &quot;address&quot;: {                                                 &quot;aptNumber&quot;: &quot;&quot;,                                                 &quot;postalCode&quot;: &quot;&quot;,                                                 &quot;country&quot;: &quot;&quot;,                                                 &quot;province&quot;: &quot;&quot;,                                                 &quot;city&quot;: &quot;&quot;,                                                 &quot;streetName&quot;: &quot;&quot;,                                                 &quot;streetNumber&quot;: &quot;&quot;,                                                 &quot;POBox&quot;: &quot;&quot;,                                                 &quot;unit&quot;: &quot;&quot;                                 }                 } } , &quot;agent&quot;: { &quot;sessionEnd&quot;:null, &quot;employeeNumber&quot;:null, &quot;languagePref&quot;:&quot;EN&quot;, &quot;simMode&quot;:&quot;off&quot;, &quot;sessionStart&quot;:null, &quot;groups&quot;:[&quot;Admin&quot;], &quot;agentId&quot;:&quot;ihab_benyamin.hanna&quot;, &quot;agentInfo&quot;: { &quot;primary&quot;:null, &quot;workPhone&quot;:null, &quot;faxNumber&quot;:null, &quot;email&quot;:null, &quot;cellPhone&quot;:null, &quot;mainPhone&quot;:null, &quot;lastName&quot;:null, &quot;firstName&quot;:null } } } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">params</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${BPDPath}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is it right page" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="542188422">&quot;status&quot;:&quot;200&quot;,</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                </ResponseAssertion>
                <hashTree/>
                <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="JSON Parse for Instance ID" enabled="true">
                  <stringProp name="TestPlan.comments">Get the URL that will start a new process</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());

//vars.put(&quot;taskID&quot;,SearchResponse.data.tasks[0].tkiid);

// Also get the process instance Id

vars.put(&quot;instanceID&quot;,SearchResponse.data.piid);
vars.put(&quot;taskCount&quot;,&apos;-1&apos;);
vars.put(&quot;keepProcessing&quot;,&quot;TRUE&quot;);
log.info(&quot;SearchResponse.data.piid : &quot; + SearchResponse.data.piid);</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                </BSFPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Close All Tasks" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(&quot;${keepProcessing}&quot; == &quot;TRUE&quot;)}</stringProp>
            </WhileController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Fetch Task" enabled="true"/>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="false">
                  <stringProp name="ConstantTimer.delay">500</stringProp>
                  <stringProp name="RandomTimer.range">0</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get TaskID" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                  <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${BPDPath}/${instanceID}?parts=header</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="TestPlan.comments">Just simulating some Portal activity</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSON Parse for TaskID" enabled="true">
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());

vars.put(&quot;taskID&quot;,&quot;BAD&quot;);
vars.put(&quot;keepProcessing&quot;,&quot;TRUE&quot;);
vars.put(&quot;keepFetchingTask&quot;,&quot;TRUE&quot;);
vars.put(&quot;getTaskID&quot;,0);

var tasks = SearchResponse.data.tasks;
vars.put(&quot;processState&quot;,SearchResponse.data.state);

if(SearchResponse.status == 200) {
	vars.put(&quot;getTaskID&quot;,SearchResponse.status);
}

log.info(&quot;processState : &quot; + SearchResponse.data.state);

var j;
j = 0;
vars.put(&quot;taskCount&quot;,j);

if(SearchResponse.data.state == &quot;STATE_RUNNING&quot;) {
	for(var i=0; i &lt;tasks.length; i++) {
		if (tasks[i].state == &quot;STATE_READY&quot; || tasks[i].state == &quot;STATE_CLAIMED&quot;) {
			if(tasks[i].status == &quot;Received&quot; || tasks[i].status == &quot;New&quot;) {
				if(tasks[i].data.variables.stepType == &quot;YESNO&quot; 
					|| tasks[i].data.variables.stepType == &quot;MULTISELECT&quot; 
					|| tasks[i].data.variables.stepType == &quot;INFO&quot;
					|| tasks[i].data.variables.stepType == &quot;SYSTEM&quot;
					|| tasks[i].data.variables.stepType == &quot;INPUT&quot;
					|| tasks[i].data.variables.stepType == &quot;WRAPUP&quot;) {
					vars.put(&quot;taskID&quot;,SearchResponse.data.tasks[i].tkiid);
					vars.put(&quot;stepType&quot;,SearchResponse.data.tasks[i].data.variables.stepType);
					vars.put(&quot;BPGUID&quot;,SearchResponse.data.tasks[i].data.variables.BPGUID);
					j++;
					vars.put(&quot;taskCount&quot;,j);
					vars.put(&quot;keepFetchingTask&quot;,&quot;FALSE&quot;);

					log.info(&quot;tasks.status : &quot; + SearchResponse.data.state);
					log.info(&quot;taskID : &quot; + SearchResponse.data.tasks[i].tkiid);
					log.info(&quot;stepType : &quot; + SearchResponse.data.tasks[i].data.variables.stepType);
					log.info(&quot;BPGUID : &quot; + SearchResponse.data.tasks[i].data.variables.BPGUID);
					log.info(&quot;taskCount : &quot; + j);
					
					break;
				}
			}
		}
	}
} else {
	vars.put(&quot;keepFetchingTask&quot;,&quot;FALSE&quot;);
	vars.put(&quot;keepProcessing&quot;,&quot;FALSE&quot;);
}

var _taskID = vars.get(&quot;taskID&quot;);
//if(_taskID == &quot;BAD&quot;) {
//	vars.put(&quot;keepProcessing&quot;,&quot;FALSE&quot;);
//}

log.info(&quot;keepFetchingTask : &quot; + vars.get(&quot;keepFetchingTask&quot;));
log.info(&quot;keepProcessing : &quot; + vars.get(&quot;keepProcessing&quot;));
</stringProp>
                    <stringProp name="scriptLanguage">javascript</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If getTaskID Response" enabled="true">
                <stringProp name="IfController.condition">${__javaScript(&quot;${getTaskID}&quot; == 200)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Fetch Task Again" enabled="true">
                  <stringProp name="IfController.condition">${__javaScript(&quot;${keepFetchingTask}&quot; == &quot;TRUE&quot;)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Not keepProcessing" enabled="true">
                    <stringProp name="IfController.condition">${__javaScript(&quot;${keepFetchingTask}&quot; == &quot;TRUE&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Go to Fetch Task" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="1457322630">Blueprints BPM Performance Test Plan</stringProp>
                        <stringProp name="-22291904">Comprehensive Flow BPD Bench</stringProp>
                        <stringProp name="1693577387">Main Loop</stringProp>
                        <stringProp name="-101949497">Close All Tasks</stringProp>
                        <stringProp name="-2054646933">Fetch Task</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="true">
                <stringProp name="ConstantTimer.delay">0</stringProp>
                <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Close Task" enabled="true"/>
              <hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If getTaskID Response" enabled="true">
                  <stringProp name="IfController.condition">${__javaScript(&quot;${getTaskID}&quot; == 200)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Task Exists" enabled="true">
                    <stringProp name="IfController.condition">${__javaScript(&quot;${taskCount}&quot; &gt; 0 &amp;&amp; &quot;${keepProcessing}&quot; == &quot;TRUE&quot;)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If taskID Not BAD" enabled="true">
                      <stringProp name="IfController.condition">${__javaScript(&quot;${taskID}&quot; != &quot;BAD&quot;)}</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Start Task" enabled="true">
                        <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">action=start</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                        <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol">https</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${TaskPath}/${taskID}</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="49586">200</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                        <intProp name="Assertion.test_type">8</intProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSON Parse of Status" enabled="true">
                        <stringProp name="scriptLanguage">javascript</stringProp>
                        <stringProp name="parameters"></stringProp>
                        <stringProp name="filename"></stringProp>
                        <stringProp name="cacheKey"></stringProp>
                        <stringProp name="script">vars.put(&quot;taskStarted&quot;,0);

// Turn the JSON into an object called &apos;SearchResponse&apos;
eval(&apos;var SearchResponse = &apos; + prev.getResponseDataAsString());

if(SearchResponse.status == 200) {
	vars.put(&quot;taskStarted&quot;,SearchResponse.status);
}

var task_started;
task_started = vars.get(&quot;taskStarted&quot;);

log.info(&quot;taskStarted : &quot; + task_started);</stringProp>
                      </JSR223PostProcessor>
                      <hashTree/>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If  stepType MULTISELECT" enabled="true">
                        <stringProp name="IfController.condition">${__javaScript(&quot;${stepType}&quot; == &quot;MULTISELECT&quot;)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Right MultiSelect" enabled="true">
                          <stringProp name="IfController.condition">${__javaScript(&quot;${BPGUID}&quot; == &quot;${MultiSelectBPDID}&quot;)}</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                        </IfController>
                        <hashTree>
                          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If taskStarted" enabled="true">
                            <stringProp name="IfController.condition">${__javaScript(&quot;${taskStarted}&quot; == 200)}</stringProp>
                            <boolProp name="IfController.evaluateAll">false</boolProp>
                          </IfController>
                          <hashTree>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set Task Data" enabled="true">
                              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                <collectionProp name="Arguments.arguments">
                                  <elementProp name="" elementType="HTTPArgument">
                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                    <stringProp name="Argument.value">action=setData&amp;params={&apos;signal1&apos;:&apos;${personName}&apos;}</stringProp>
                                    <stringProp name="Argument.metadata">=</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                              <stringProp name="HTTPSampler.protocol">https</stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">${TaskPath}/${taskID}</stringProp>
                              <stringProp name="HTTPSampler.method">POST</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                              <boolProp name="HTTPSampler.monitor">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree/>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="false">
                              <stringProp name="ConstantTimer.delay">100</stringProp>
                              <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="49586">200</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                              <intProp name="Assertion.test_type">8</intProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Close Task" enabled="true">
                              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                <collectionProp name="Arguments.arguments">
                                  <elementProp name="" elementType="HTTPArgument">
                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                    <stringProp name="Argument.value">action=ButtonGroup0_Button0</stringProp>
                                    <stringProp name="Argument.metadata">=</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                              <stringProp name="HTTPSampler.protocol">https</stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">${ServicePath}/${taskID}</stringProp>
                              <stringProp name="HTTPSampler.method">POST</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                              <boolProp name="HTTPSampler.monitor">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree/>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="false">
                              <stringProp name="ConstantTimer.delay">100</stringProp>
                              <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="49586">200</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                              <intProp name="Assertion.test_type">8</intProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                            </ResponseAssertion>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If  stepType YESNO" enabled="true">
                        <stringProp name="IfController.condition">${__javaScript(&quot;${stepType}&quot; == &quot;YESNO&quot;)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Right YesNo" enabled="true">
                          <stringProp name="IfController.condition">${__javaScript(&quot;${BPGUID}&quot; == &quot;${YesNoBPDID}&quot;)}</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                        </IfController>
                        <hashTree>
                          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If taskStarted" enabled="true">
                            <stringProp name="IfController.condition">${__javaScript(&quot;${taskStarted}&quot; == 200)}</stringProp>
                            <boolProp name="IfController.evaluateAll">false</boolProp>
                          </IfController>
                          <hashTree>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set Task Data" enabled="true">
                              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                <collectionProp name="Arguments.arguments">
                                  <elementProp name="" elementType="HTTPArgument">
                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                    <stringProp name="Argument.value">action=setData&amp;params={&apos;answer&apos;:&apos;${yesNo}&apos;}</stringProp>
                                    <stringProp name="Argument.metadata">=</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                              <stringProp name="HTTPSampler.protocol">https</stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">${TaskPath}/${taskID}</stringProp>
                              <stringProp name="HTTPSampler.method">POST</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                              <boolProp name="HTTPSampler.monitor">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree/>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="false">
                              <stringProp name="ConstantTimer.delay">100</stringProp>
                              <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="49586">200</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                              <intProp name="Assertion.test_type">8</intProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Close Task" enabled="true">
                              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                <collectionProp name="Arguments.arguments">
                                  <elementProp name="" elementType="HTTPArgument">
                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                    <stringProp name="Argument.value">action=ButtonGroup0_Button0</stringProp>
                                    <stringProp name="Argument.metadata">=</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                              <stringProp name="HTTPSampler.protocol">https</stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">${ServicePath}/${taskID}</stringProp>
                              <stringProp name="HTTPSampler.method">POST</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                              <boolProp name="HTTPSampler.monitor">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree/>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="false">
                              <stringProp name="ConstantTimer.delay">100</stringProp>
                              <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="49586">200</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                              <intProp name="Assertion.test_type">8</intProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                            </ResponseAssertion>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If  stepType INPUT" enabled="true">
                        <stringProp name="IfController.condition">${__javaScript(&quot;${stepType}&quot; == &quot;INPUT&quot;)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Right Input" enabled="true">
                          <stringProp name="IfController.condition">${__javaScript(&quot;${BPGUID}&quot; == &quot;${FinishBPDID}&quot;)}</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                        </IfController>
                        <hashTree>
                          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If taskStarted" enabled="true">
                            <stringProp name="IfController.condition">${__javaScript(&quot;${taskStarted}&quot; == 200)}</stringProp>
                            <boolProp name="IfController.evaluateAll">false</boolProp>
                          </IfController>
                          <hashTree>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set Task Data" enabled="true">
                              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                <collectionProp name="Arguments.arguments">
                                  <elementProp name="" elementType="HTTPArgument">
                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                    <stringProp name="Argument.value">action=setData&amp;params={&apos;answer&apos;:&apos;finish&apos;}</stringProp>
                                    <stringProp name="Argument.metadata">=</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                              <stringProp name="HTTPSampler.protocol">https</stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">${TaskPath}/${taskID}</stringProp>
                              <stringProp name="HTTPSampler.method">POST</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                              <boolProp name="HTTPSampler.monitor">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree/>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="false">
                              <stringProp name="ConstantTimer.delay">100</stringProp>
                              <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="49586">200</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                              <intProp name="Assertion.test_type">8</intProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Close Task" enabled="true">
                              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                <collectionProp name="Arguments.arguments">
                                  <elementProp name="" elementType="HTTPArgument">
                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                    <stringProp name="Argument.value">action=ButtonGroup0_Button0</stringProp>
                                    <stringProp name="Argument.metadata">=</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                              <stringProp name="HTTPSampler.protocol">https</stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">${ServicePath}/${taskID}</stringProp>
                              <stringProp name="HTTPSampler.method">POST</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                              <boolProp name="HTTPSampler.monitor">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree/>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="false">
                              <stringProp name="ConstantTimer.delay">100</stringProp>
                              <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="49586">200</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                              <intProp name="Assertion.test_type">8</intProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                            </ResponseAssertion>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If stepType WRAPUP" enabled="true">
                        <stringProp name="IfController.condition">${__javaScript(&quot;${stepType}&quot; == &quot;WRAPUP&quot;)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Right WrapUp" enabled="true">
                          <stringProp name="IfController.condition">${__javaScript(&quot;${BPGUID}&quot; == &quot;${WrapUpBPDID}&quot;)}</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                        </IfController>
                        <hashTree>
                          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If taskStarted" enabled="true">
                            <stringProp name="IfController.condition">${__javaScript(&quot;${taskStarted}&quot; == 200)}</stringProp>
                            <boolProp name="IfController.evaluateAll">false</boolProp>
                          </IfController>
                          <hashTree>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set Task Data" enabled="true">
                              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                <collectionProp name="Arguments.arguments">
                                  <elementProp name="" elementType="HTTPArgument">
                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                    <stringProp name="Argument.value">action=setData&amp;params={&apos;signal1&apos;:&apos;endCustomerSession&apos;,&apos;signal2&apos;:&apos;endProcess&apos;}</stringProp>
                                    <stringProp name="Argument.metadata">=</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                              <stringProp name="HTTPSampler.protocol">https</stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">${TaskPath}/${taskID}</stringProp>
                              <stringProp name="HTTPSampler.method">POST</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                              <boolProp name="HTTPSampler.monitor">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree/>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="false">
                              <stringProp name="ConstantTimer.delay">100</stringProp>
                              <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="49586">200</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                              <intProp name="Assertion.test_type">8</intProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Close Task" enabled="true">
                              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                <collectionProp name="Arguments.arguments">
                                  <elementProp name="" elementType="HTTPArgument">
                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                    <stringProp name="Argument.value">action=ButtonGroup0_Button0</stringProp>
                                    <stringProp name="Argument.metadata">=</stringProp>
                                  </elementProp>
                                </collectionProp>
                              </elementProp>
                              <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                              <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                              <stringProp name="HTTPSampler.response_timeout"></stringProp>
                              <stringProp name="HTTPSampler.protocol">https</stringProp>
                              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                              <stringProp name="HTTPSampler.path">${ServicePath}/${taskID}</stringProp>
                              <stringProp name="HTTPSampler.method">POST</stringProp>
                              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                              <boolProp name="HTTPSampler.monitor">false</boolProp>
                              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree/>
                            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="false">
                              <stringProp name="ConstantTimer.delay">100</stringProp>
                              <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
                            </UniformRandomTimer>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                              <collectionProp name="Asserion.test_strings">
                                <stringProp name="49586">200</stringProp>
                              </collectionProp>
                              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                              <intProp name="Assertion.test_type">8</intProp>
                              <boolProp name="Assertion.assume_success">false</boolProp>
                            </ResponseAssertion>
                            <hashTree/>
                          </hashTree>
                        </hashTree>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If stepType INFO" enabled="true">
                        <stringProp name="IfController.condition">${__javaScript(&quot;${stepType}&quot; == &quot;INFO&quot;)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If taskStarted" enabled="true">
                          <stringProp name="IfController.condition">${__javaScript(&quot;${taskStarted}&quot; == 200)}</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                        </IfController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Close Task" enabled="true">
                            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.value">action=ButtonGroup0_Button0</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">https</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${ServicePath}/${taskID}</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree/>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="false">
                            <stringProp name="ConstantTimer.delay">100</stringProp>
                            <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="49586">200</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                            <intProp name="Assertion.test_type">8</intProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                          </ResponseAssertion>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If stepType SYSTEM" enabled="true">
                        <stringProp name="IfController.condition">${__javaScript(&quot;${stepType}&quot; == &quot;SYSTEM&quot;)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                      </IfController>
                      <hashTree>
                        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If taskStarted" enabled="true">
                          <stringProp name="IfController.condition">${__javaScript(&quot;${taskStarted}&quot; == 200)}</stringProp>
                          <boolProp name="IfController.evaluateAll">false</boolProp>
                        </IfController>
                        <hashTree>
                          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Close Task" enabled="true">
                            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                              <collectionProp name="Arguments.arguments">
                                <elementProp name="" elementType="HTTPArgument">
                                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                  <stringProp name="Argument.value">action=ButtonGroup0_Button0</stringProp>
                                  <stringProp name="Argument.metadata">=</stringProp>
                                </elementProp>
                              </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${ServerIP}</stringProp>
                            <stringProp name="HTTPSampler.port">${ServerPort}</stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">https</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${ServicePath}/${taskID}</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                          </HTTPSamplerProxy>
                          <hashTree/>
                          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Portal Think Time" enabled="false">
                            <stringProp name="ConstantTimer.delay">100</stringProp>
                            <stringProp name="RandomTimer.range">${ThinkTime}</stringProp>
                          </UniformRandomTimer>
                          <hashTree/>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Is page available?" enabled="true">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="49586">200</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                            <intProp name="Assertion.test_type">8</intProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                          </ResponseAssertion>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree Error" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree Success" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="ResultCollector.success_only_logging">true</boolProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Active Threads Over Time " enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">10000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Hits per Second" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">5000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Response Times Over Time" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">5000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesPercentilesGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Response Times Percentiles" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">500</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="Transactions per Second" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
        </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
